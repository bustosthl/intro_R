[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Presentación",
    "section": "",
    "text": "El objetivo de los siguientes párrafos es dar una cálida y armoniosa bienvenida al mundo de datos para personas de la carrera de Sociología de la UBA, pero extensible a distintas carreras de Ciencias Sociales a lo largo y ancho de la República Argentina.\nimg ##\n\n\nSe popularizó en los últimos años el brumoso término de Big Data, un espacio sexy y confuso en donde se reunieron distintas técnicas, disciplinas y profesiones que lograban incorporar algún elemento novedoso al viejo arte trabajar con datos.\n¿Qué es lo realmente interesante? Las tres famosas “V” bocetan un nuevo contexto de circulación de los datos: en grandes volúmenes, en tipos y formatos variados y con una mayor velocidad de intercambio y capacidad de cómputo. Ahora bien, como toda persona que quiera dedicarse a las Ciencias Sociales sabe (¡o debe saber!), poder recolectar, comprender, administrar y analizar datos para construir información es una parte fundamental del proceso de investigación. Al final, el enfoque de este espacio será cómo navegar las nuevas tempestades para ejercer el oficio que nos interpeló en un primer momento.\n\n\n\nR es un lenguaje de programación enfocado en análisis y visualización de datos. Nos agrada particularmente por ser un producto de software libre y código abierto: puede ser usado, modificado y citado sin pagar licencias de ningún tipo. Además presenta alrededor del globo -y en Argentina en particular- una gran comunidad de usuarios que crean formas específicas de aplicación de este lenguaje que nos facilitará su uso en Ciencias Sociales. Ya sea por facilitar el acceso a ciertas fuentes de información, por sintetizar procesos complejos en funciones simples de ejecutar o tan sólo por tener espacios donde realizar consultas y recibir apoyo.\nUn detalle no menor: R, como herramienta, es sólo una de las tantas maneras de acceder al mundo de datos. La idea es que funcione como puerta de entrada al entendimiento de las lógicas de la programación y el manejo de los distintos objetos que vamos a utilizar en estos espacios.\n¿Por qué utilizar lenguajes de programación y no otras alternativas? Hay otros programas y aplicaciones de renombre que cubren varias de las utilidades que le vamos a dar a R en este espacio. Sin embargo, hay dos ventajas importantes de los lenguajes de programación que es interesante destacar: primero, permiten una integración vertical de distintos procesos de un mismo flujo de trabajo (procesamiento, análisis, visualización, incluso la confección de un informe). Casi ninguna herramienta contempla la totalidad de las funciones antedichas y, si está entre sus bondades, probablemente sea engorroso o esté mal documentado. A lo segundo se le podría decir integración horizontal: los lenguajes de programación permiten trabajar sobre distintas estructuras de datos. Un mismo código puede albergar trabajo con tablas, información geográfica, texto, imágenes, audio, otros códigos (!) e incluso devolver todo lo anterior en un formato legible directamente por algún programa de renombre. Sin excusas. La principal desventaja es que se tarda más en aprender. Derribar esa última barrera es la tarea que nos encuentra aquí mismo.\n\n\n\nEl objetivo general del curso es introducir en el uso del lenguaje R a través de la interfaz Rstudio, priorizando los paquetes incluídos en la colección Tidyverse y con especial foco en el proceso de extracción, limpieza, análisis y visualización de datos.\nQuienes cursen podrán:\n\nComprender las características generales de los distintos tipos de datos que se pueden administrar con herramientas informáticas.\nConocer procesos típicos de transformación de bases de datos.\nRepresentar visualmente la información recolectada, adquiriendo criterios mínimos para una correcta distribución de los elementos disponibles.\nAproximarse a métodos típicos de análisis de datos en Ciencias Sociales, utilizando fuentes como resultados electorales o información censal.\n\n\n\n\nEl curso se estructura en cuatro partes donde se irá construyendo de manera progresiva el procesamiento, análisis y visualización de la información disponible. Los contenidos de cada una se detallan a continuación.\n\nIntroducción a R en Ciencias Sociales.\n\nContextualización del uso de herramientas informáticas en Ciencias Sociales. \nIntroducción de la plataforma Rstudio, al lenguaje R y a las formas de aprendizaje en el ámbito de la programación. \nRevisión general del proceso de análisis de datos.\n\nPresentación de la colección Tidyverse para extracción y limpieza de datos.\n\nExhibición de funciones típicas de la colección mencionada. \nAplicación práctica de dichas funciones en bases típicas en el ámbito de las Ciencias Sociales. \nDesarrollo de tipos comunes de bases de datos: formatos wide y long.\n\nUso de la colección Tidyverse para análisis de datos.\n\nIntroducción a herramientas típicas de análisis estadístico para trabajar con información cuantitativa. \nIncorporación de transformaciones complejas sobre bases de datos: agrupaciones, uniones, medidas resumen. \nExposición de formas simples de visualización de datos. \n\nUso de la colección Tidyverse para visualización de datos.\n\nRepaso por distintos tipos de información y sus formas adecuadas de visualización.\nPresentación de criterios básicos de construcción de un gráfico.\nAplicación práctica sobre bases típicas en el ámbito de las Ciencias Sociales."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Summary",
    "section": "",
    "text": "Summary\nIn summary, this book has no content whatsoever."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1. Piletazo",
    "section": "",
    "text": "¿Qué significa realmente analizar datos? La idea de arrancar con un primer recorrido de punta a punta tiene un mero efecto didáctico: dar la suficiente energía para no abandonar el proceso antes de aprender. Asimilar un lenguaje de programación es complejo y puede ser muy frustrante para quienes están empezando. Como con el resto de las cosas, la única forma es poner manos al teclado y practicar hasta que salga; algo muy difícil de hacer si no se visualiza el sentido del esfuerzo.\n\n\nUn breve y necesario paréntesis de definiciones de los elementos con los que vamos a estar trabajando.\n\nScript: secuencia de comandos. Nuestros scripts estarán escritos en R.\nRstudio: plataforma que usaremos para administrar los archivos necesarios para trabajar con R.\nProyecto de Rstudio: es una forma de agrupar los distintos scripts y archivos que utilicemos en un sólo lugar. También nos facilita trabajar con directorios o guardar ciertas configuraciones del entorno.\nDocumento de R (.r): archivo con instrucciones escritas en R.\nDocumento de RMarkdown (.rmd): archivo que permite combinar instrucciones escritas en R con distintos formatos de texto. Se utiliza para escribir informes fáciles para leer y cómodos para trabajar.\nQuarto document (.qmd): Símil al anterior, pero permite distintos lenguajes. Es el que está presente en la mayor parte de este curso.\nFunción: conjunto de instrucciones empaquetados para usar con mayor comodidad.\nPaquete/Librerías: conjunto de funciones, en general, con el objetivo de trabajar en un rubro en particular o con cierto tipo de datos.\n\n\n\n\nHacer un análisis requiere primero una pregunta que nos guíe. Es importante para evitar perdernos en el mar de información disponible. Enfocar los esfuerzos nos va a ayudar a buscar mejor qué función necesitamos para responder nuestra pregunta y además valoriza uno de los elementos más importantes que tienen para aportar las Ciencias Sociales al mundo de datos: hacer preguntas interesantes.\nEn este caso nos vamos a preguntar por el voto en blanco en las elecciones nacionales argentinas. ¿Cómo fue evolucionando entre las últimas elecciones el voto en blanco?\n\n\n\nLo primero que debemos hacer es cargar las librerías, esto es, el conjunto de funciones que vamos a utilizar para responder nuestra pregunta-problema. Aquí damos la bienvenida a Tidyverse: un conjunto de paquetes que tienen una manera similar de escribirse y utilizarse, facilitando el trabajo conjunto de las distintas librerías. La primera vez que se utiliza una librería, hay que descargarla con la función install.packages().\n\n#install.packages(\"tidyverse\") # instalamos el conjunto de librerías que componen la colección tidyverse\nlibrary(tidyverse) # cargamos las funciones para poder utilizarlas\n\nLuego, tenemos que cargar los datos que vamos a utilizar. La función dependerá del tipo de archivo que tengamos que cargar. Los tipos de archivos más comunes son .csv y .xlsx. Los datos están descargados de la plataforma Data CP.\nPara un acceso más simple, pueden consultar las fuentes de datos aquí. Si tienen problemas con la ruta, pueden saber dónde está parado R con la función getwd().\n\nCSVExcel\n\n\n\ndata &lt;- read_csv(\"data/encuentro_1/ARG_elecciones.csv\")\ndata\n\n# A tibble: 54,913 × 10\n   id        seccion Elecciones Partido Porcentaje Votos Participacion electores\n   &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;     &lt;dbl&gt;\n 1 BUENOS A… Adolfo… BALLOTAGE… BLANCO        1.19   134          79.2     14171\n 2 BUENOS A… Albert… BALLOTAGE… BLANCO        1.6    123          84.2      9147\n 3 BUENOS A… Almira… BALLOTAGE… BLANCO        1.37  4738          83.8    412578\n 4 BUENOS A… Arreci… BALLOTAGE… BLANCO        1.53   306          84.0     23840\n 5 BUENOS A… Avella… BALLOTAGE… BLANCO        1.61  3617          82.5    272641\n 6 BUENOS A… Ayacuc… BALLOTAGE… BLANCO        1.53   212          81.2     17022\n 7 BUENOS A… Azul, … BALLOTAGE… BLANCO        1.02   452          80.3     55060\n 8 BUENOS A… Bahia … BALLOTAGE… BLANCO        1.57  2948          80.4    233442\n 9 BUENOS A… Balcar… BALLOTAGE… BLANCO        1.01   312          81.9     37704\n10 BUENOS A… Barade… BALLOTAGE… BLANCO        1.03   230          82.1     27119\n# ℹ 54,903 more rows\n# ℹ 2 more variables: votantes &lt;dbl&gt;, Provincia &lt;chr&gt;\n\n\n\n\n\n#install.packages(\"readxl\") # en caso de error, instalar y cargar librería readxl \nlibrary(readxl)\ndata &lt;- read_excel(\"data/encuentro_1/ARG_elecciones.xlsx\")\ndata\n\n# A tibble: 54,913 × 10\n   id        seccion Elecciones Partido Porcentaje Votos Participacion electores\n   &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;     &lt;dbl&gt;\n 1 BUENOS A… Adolfo… BALLOTAGE… BLANCO        1.19   134          79.2     14171\n 2 BUENOS A… Albert… BALLOTAGE… BLANCO        1.6    123          84.2      9147\n 3 BUENOS A… Almira… BALLOTAGE… BLANCO        1.37  4738          83.8    412578\n 4 BUENOS A… Arreci… BALLOTAGE… BLANCO        1.53   306          84.0     23840\n 5 BUENOS A… Avella… BALLOTAGE… BLANCO        1.61  3617          82.5    272641\n 6 BUENOS A… Ayacuc… BALLOTAGE… BLANCO        1.53   212          81.2     17022\n 7 BUENOS A… Azul, … BALLOTAGE… BLANCO        1.02   452          80.3     55060\n 8 BUENOS A… Bahia … BALLOTAGE… BLANCO        1.57  2948          80.4    233442\n 9 BUENOS A… Balcar… BALLOTAGE… BLANCO        1.01   312          81.9     37704\n10 BUENOS A… Barade… BALLOTAGE… BLANCO        1.03   230          82.1     27119\n# ℹ 54,903 more rows\n# ℹ 2 more variables: votantes &lt;dbl&gt;, Provincia &lt;chr&gt;\n\n\n\n\n\nCuando utilizamos R vamos a estar utilizando objetos. El operador &lt;- se utiliza para asignar el resultado de una función a un objeto y se puede crear con botón alt + botón -. Los objetos pertenecen a una clase, lo que implica que se permiten ciertas operaciones y se restringen otras. Por ejemplo, a los números se les puede aplicar operaciones aritméticas, a las tablas se les puede consultar sus filas-columnas y a las cadenas de texto se las puede pasar a mayúsculas.\n\n# consultamos la clase de cada uno de los tres objetos\nclass(42)\n\n[1] \"numeric\"\n\nclass(data)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nclass(\"cadena de texto\")\n\n[1] \"character\"\n\n# aplicamos operaciones\n42 * 42\n\n[1] 1764\n\ndim(data)\n\n[1] 54913    10\n\ntoupper(\"cadena de texto\") # función para pasar a mayúscula una cadena de texto\n\n[1] \"CADENA DE TEXTO\"\n\n# qué pasa si no respetamos la clase\n# \"cadena de texto\" * \"cadena de texto\" \n# dim(42)\n\nLas últimas líneas del código anterior están comentadas, ya que ante el error se detiene la operación. Pueden probarlas por su cuenta eliminado el #, comando que abre un comentario: el código que sigue será ignorado por el programa.\nPara obtener la documentación de una función, podemos ejecutar un signo de pregunta y la función. Nos abrirá la documentación correspondiente en el panel derecho.\n\n# ?dim\n\nA los archivos del tipo data.frame podemos aplicarle distintas funciones para hacer una exploración rápida de qué hay dentro. Veamos algunas:\n\nglimpse(data) # exploramos nombres de columnas, tipo de datos, algunos primeros valores\n\nRows: 54,913\nColumns: 10\n$ id            &lt;chr&gt; \"BUENOS AIRES_ADOLFO ALSINA\", \"BUENOS AIRES_ALBERTI\", \"B…\n$ seccion       &lt;chr&gt; \"Adolfo Alsina, Buenos Aires\", \"Alberti, Buenos Aires\", …\n$ Elecciones    &lt;chr&gt; \"BALLOTAGE 2015\", \"BALLOTAGE 2015\", \"BALLOTAGE 2015\", \"B…\n$ Partido       &lt;chr&gt; \"BLANCO\", \"BLANCO\", \"BLANCO\", \"BLANCO\", \"BLANCO\", \"BLANC…\n$ Porcentaje    &lt;dbl&gt; 1.19, 1.60, 1.37, 1.53, 1.61, 1.53, 1.02, 1.57, 1.01, 1.…\n$ Votos         &lt;dbl&gt; 134, 123, 4738, 306, 3617, 212, 452, 2948, 312, 230, 317…\n$ Participacion &lt;dbl&gt; 79.22, 84.22, 83.77, 84.05, 82.52, 81.24, 80.30, 80.37, …\n$ electores     &lt;dbl&gt; 14171, 9147, 412578, 23840, 272641, 17022, 55060, 233442…\n$ votantes      &lt;dbl&gt; 11226, 7704, 345606, 20038, 224976, 13829, 44214, 187615…\n$ Provincia     &lt;chr&gt; \"BUENOS AIRES\", \"BUENOS AIRES\", \"BUENOS AIRES\", \"BUENOS …\n\ndim(data) # cantidad de filas y columnas \n\n[1] 54913    10\n\nsummary(data) # devuelve el tipo de datos que hay dentro de las columnas y, para aquellas columnas de tipo numéricas, devuelve algunas métricas de posición como valores mínimos, máximos, mediana, promedio. \n\n      id              seccion           Elecciones          Partido         \n Length:54913       Length:54913       Length:54913       Length:54913      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   Porcentaje          Votos        Participacion      electores      \n Min.   :  0.000   Min.   :     0   Min.   :  0.00   Min.   :      0  \n 1st Qu.:  0.320   1st Qu.:    37   1st Qu.: 69.93   1st Qu.:   9273  \n Median :  1.290   Median :   247   Median : 75.38   Median :  22116  \n Mean   :  9.997   Mean   :  4506   Mean   : 73.92   Mean   :  61369  \n 3rd Qu.:  8.760   3rd Qu.:  1989   3rd Qu.: 79.56   3rd Qu.:  60026  \n Max.   :100.000   Max.   :621106   Max.   :104.49   Max.   :1131854  \n NA's   :5         NA's   :3                                          \n    votantes       Provincia        \n Min.   :     0   Length:54913      \n 1st Qu.:  6923   Class :character  \n Median : 16283   Mode  :character  \n Mean   : 46094                     \n 3rd Qu.: 44921                     \n Max.   :879215                     \n                                    \n\n\nAhora bien, construimos una tabla con el voto en blanco por elecciones y calculamos el mismo como % de votantes de cada elección. Aquí vamos a bienvenir a el famoso pipe (%&gt;%). Este operador nos va a facilitar la lectura del código cuando querramos utilizar varias funciones sobre un mismo data.frame.\n\ntabla_blanco &lt;- data %&gt;%\nfilter(Partido == \"BLANCO\") %&gt;% # filtramos votos en blanco\ngroup_by(Elecciones) %&gt;%  # agrupamos por elecciones\nsummarise(blanco = sum(Votos), # sumamos votos en blanco\nvotantes = sum(votantes), #sumamos votantes\nblanco_per = blanco/votantes) %&gt;% # calculamos el porcentaje\nmutate(anio = str_sub(Elecciones,-4)) # creamos una nueva columna que indica el año de la elección\n\ntabla_blanco # mostramos el resultado\n\n# A tibble: 10 × 5\n   Elecciones      blanco votantes blanco_per anio \n   &lt;chr&gt;            &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;\n 1 BALLOTAGE 2015  305229 25738560     0.0119 2015 \n 2 BALLOTAGE 2023  417515 26863246     0.0155 2023 \n 3 GENERALES 2011  665223 21712009     0.0306 2011 \n 4 GENERALES 2015  596028 25223502     0.0236 2015 \n 5 GENERALES 2019  399751 26595503     0.0150 2019 \n 6 GENERALES 2023  554161 27100675     0.0204 2023 \n 7 PASO 2011           NA 22250504    NA      2011 \n 8 PASO 2015       989823 23204024     0.0427 2015 \n 9 PASO 2019       758988 24724014     0.0307 2019 \n10 PASO 2023      1148342 24016776     0.0478 2023 \n\n\n¡Qué interesante sería ver esta tabla en un gráfico! La librería predilecta para realizar gráficos en R es ggplot2. ggplot2 construye a los gráficos como capas: primero se inserta la base de datos (mediante el comando %&gt;%); luego se mapean los ejes x e y (mediante la función aes()); con la función geom_col() se indica realizar un gráfico de columnas y por último se agregan las capas de definiciones estéticas.\n\nlibrary(scales)\n# cambiamos el tipo de la columna para que tenga un orden\n\norden &lt;- c(\"PASO 2011\", \"GENERALES 2011\",\n\"PASO 2015\", \"GENERALES 2015\",\"BALLOTAGE 2015\",\n\"PASO 2019\", \"GENERALES 2019\",\n\"PASO 2023\", \"GENERALES 2023\",\"BALLOTAGE 2023\")\n\np &lt;- tabla_blanco %&gt;%\ndrop_na() %&gt;% # eliminamos elecciones sin valores\nggplot(aes(x=factor(Elecciones,orden), y=blanco_per, fill=anio))+ # indicamos qué variables vamos a utilizar\ngeom_col(show.legend=FALSE)+ # indicamos el tipo de gráfico. Geom_ es el prefijo para ver los distintos gráficos que pueden usarse\ntheme_minimal()+\ntheme(axis.text.x=element_text(angle=30, hjust=1))+ # rotamos las etiquetas de los ejes para que sean legibles\nlabs(title=\"% de voto en blanco en elecciones ejecutivas\",\nsubtitle=\"total nacional\", x=\"\", y=\"\", caption=\"Resultados provisorios en base a DINE\")+\nscale_fill_brewer(palette=\"Set2\")+ # elegimos una paleta para el argumento \"fill\"\nscale_y_continuous(labels=percent) # indicamos que el eje Y es un porcentaje\n\np\n\n\n\n\n\n\n\n\nPara finalizar, guardamos ambos elementos para poder recuperarlos localmente.\n\ntabla_blanco %&gt;% \nwrite_excel_csv(\"outputs/encuentro_1/arg_votos_blanco.csv\")\n\ntabla_blanco %&gt;% \nwrite_excel_csv(\"outputs/encuentro_1/arg_votos_blanco.xlsx\")\n\np # lo ejecutamos nuevamente para poder utilizar luego la función de guardado\nggsave(\"outputs/encuentro_1/arg_votos_blanco.jpg\") # guardamos la imagen con fondo blanco\nggsave(\"outputs/encuentro_1/arg_votos_blanco.png\") # guardamos la imagen sin fondo\n\n\n\n\nOpciones para seguir practicando.\n\nGrafiquen la evolución del voto en blanco en valores absolutos.\nGrafiquen la evolución del voto en blanco en una provincia en particular.\nGrafiquen la evolución del voto de un partido político que quieran."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "index.html#pequeño-título",
    "href": "index.html#pequeño-título",
    "title": "Presentación",
    "section": "",
    "text": "lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus\nlorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus\nlorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus\nlorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus\nlorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus\nlorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus lorem ipsus"
  },
  {
    "objectID": "index.html#por-qué-datos",
    "href": "index.html#por-qué-datos",
    "title": "Presentación",
    "section": "",
    "text": "Se popularizó en los últimos años el brumoso término de Big Data, un espacio sexy y confuso en donde se reunieron distintas técnicas, disciplinas y profesiones que lograban incorporar algún elemento novedoso al viejo arte trabajar con datos.\n¿Qué es lo realmente interesante? Las tres famosas “V” bocetan un nuevo contexto de circulación de los datos: en grandes volúmenes, en tipos y formatos variados y con una mayor velocidad de intercambio y capacidad de cómputo. Ahora bien, como toda persona que quiera dedicarse a las Ciencias Sociales sabe (¡o debe saber!), poder recolectar, comprender, administrar y analizar datos para construir información es una parte fundamental del proceso de investigación. Al final, el enfoque de este espacio será cómo navegar las nuevas tempestades para ejercer el oficio que nos interpeló en un primer momento."
  },
  {
    "objectID": "index.html#por-qué-r",
    "href": "index.html#por-qué-r",
    "title": "Presentación",
    "section": "",
    "text": "R es un lenguaje de programación enfocado en análisis y visualización de datos. Nos agrada particularmente por ser un producto de software libre y código abierto: puede ser usado, modificado y citado sin pagar licencias de ningún tipo. Además presenta alrededor del globo -y en Argentina en particular- una gran comunidad de usuarios que crean formas específicas de aplicación de este lenguaje que nos facilitará su uso en Ciencias Sociales. Ya sea por facilitar el acceso a ciertas fuentes de información, por sintetizar procesos complejos en funciones simples de ejecutar o tan sólo por tener espacios donde realizar consultas y recibir apoyo.\nUn detalle no menor: R, como herramienta, es sólo una de las tantas maneras de acceder al mundo de datos. La idea es que funcione como puerta de entrada al entendimiento de las lógicas de la programación y el manejo de los distintos objetos que vamos a utilizar en estos espacios.\n¿Por qué utilizar lenguajes de programación y no otras alternativas? Hay otros programas y aplicaciones de renombre que cubren varias de las utilidades que le vamos a dar a R en este espacio. Sin embargo, hay dos ventajas importantes de los lenguajes de programación que es interesante destacar: primero, permiten una integración vertical de distintos procesos de un mismo flujo de trabajo (procesamiento, análisis, visualización, incluso la confección de un informe). Casi ninguna herramienta contempla la totalidad de las funciones antedichas y, si está entre sus bondades, probablemente sea engorroso o esté mal documentado. A lo segundo se le podría decir integración horizontal: los lenguajes de programación permiten trabajar sobre distintas estructuras de datos. Un mismo código puede albergar trabajo con tablas, información geográfica, texto, imágenes, audio, otros códigos (!) e incluso devolver todo lo anterior en un formato legible directamente por algún programa de renombre. Sin excusas. La principal desventaja es que se tarda más en aprender. Derribar esa última barrera es la tarea que nos encuentra aquí mismo."
  },
  {
    "objectID": "index.html#objetivo",
    "href": "index.html#objetivo",
    "title": "Presentación",
    "section": "",
    "text": "El objetivo general del curso es introducir en el uso del lenguaje R a través de la interfaz Rstudio, priorizando los paquetes incluídos en la colección Tidyverse y con especial foco en el proceso de extracción, limpieza, análisis y visualización de datos.\nQuienes cursen podrán:\n\nComprender las características generales de los distintos tipos de datos que se pueden administrar con herramientas informáticas.\nConocer procesos típicos de transformación de bases de datos.\nRepresentar visualmente la información recolectada, adquiriendo criterios mínimos para una correcta distribución de los elementos disponibles.\nAproximarse a métodos típicos de análisis de datos en Ciencias Sociales, utilizando fuentes como resultados electorales o información censal."
  },
  {
    "objectID": "index.html#organización",
    "href": "index.html#organización",
    "title": "Presentación",
    "section": "",
    "text": "El curso se estructura en cuatro partes donde se irá construyendo de manera progresiva el procesamiento, análisis y visualización de la información disponible. Los contenidos de cada una se detallan a continuación.\n\nIntroducción a R en Ciencias Sociales.\n\nContextualización del uso de herramientas informáticas en Ciencias Sociales. \nIntroducción de la plataforma Rstudio, al lenguaje R y a las formas de aprendizaje en el ámbito de la programación. \nRevisión general del proceso de análisis de datos.\n\nPresentación de la colección Tidyverse para extracción y limpieza de datos.\n\nExhibición de funciones típicas de la colección mencionada. \nAplicación práctica de dichas funciones en bases típicas en el ámbito de las Ciencias Sociales. \nDesarrollo de tipos comunes de bases de datos: formatos wide y long.\n\nUso de la colección Tidyverse para análisis de datos.\n\nIntroducción a herramientas típicas de análisis estadístico para trabajar con información cuantitativa. \nIncorporación de transformaciones complejas sobre bases de datos: agrupaciones, uniones, medidas resumen. \nExposición de formas simples de visualización de datos. \n\nUso de la colección Tidyverse para visualización de datos.\n\nRepaso por distintos tipos de información y sus formas adecuadas de visualización.\nPresentación de criterios básicos de construcción de un gráfico.\nAplicación práctica sobre bases típicas en el ámbito de las Ciencias Sociales."
  },
  {
    "objectID": "index.html#agradecimientos",
    "href": "index.html#agradecimientos",
    "title": "Presentación del curso",
    "section": "",
    "text": "lorem ipsus"
  },
  {
    "objectID": "intro.html#antes-de-arrancar-conociendo-los-utensilios",
    "href": "intro.html#antes-de-arrancar-conociendo-los-utensilios",
    "title": "1. Piletazo",
    "section": "",
    "text": "Un breve y necesario paréntesis de definiciones de los elementos con los que vamos a estar trabajando.\n\nScript: secuencia de comandos. Nuestros scripts estarán escritos en R.\nRstudio: plataforma que usaremos para administrar los archivos necesarios para trabajar con R.\nProyecto de Rstudio: es una forma de agrupar los distintos scripts y archivos que utilicemos en un sólo lugar. También nos facilita trabajar con directorios o guardar ciertas configuraciones del entorno.\nDocumento de R (.r): archivo con instrucciones escritas en R.\nDocumento de RMarkdown (.rmd): archivo que permite combinar instrucciones escritas en R con distintos formatos de texto. Se utiliza para escribir informes fáciles para leer y cómodos para trabajar.\nQuarto document (.qmd): Símil al anterior, pero permite distintos lenguajes. Es el que está presente en la mayor parte de este curso.\nFunción: conjunto de instrucciones empaquetados para usar con mayor comodidad.\nPaquete/Librerías: conjunto de funciones, en general, con el objetivo de trabajar en un rubro en particular o con cierto tipo de datos."
  },
  {
    "objectID": "intro.html#pregunta-problema",
    "href": "intro.html#pregunta-problema",
    "title": "1. Piletazo",
    "section": "",
    "text": "Hacer un análisis requiere primero una pregunta que nos guíe. Es importante para evitar perdernos en el mar de información disponible. Enfocar los esfuerzos nos va a ayudar a buscar mejor qué función necesitamos para responder nuestra pregunta y además valoriza uno de los elementos más importantes que tienen para aportar las Ciencias Sociales al mundo de datos: hacer preguntas interesantes.\nEn este caso nos vamos a preguntar por el voto en blanco en las elecciones nacionales argentinas. ¿Cómo fue evolucionando entre las últimas elecciones el voto en blanco?"
  },
  {
    "objectID": "intro.html#conociendo-r",
    "href": "intro.html#conociendo-r",
    "title": "1. Piletazo",
    "section": "",
    "text": "Lo primero que debemos hacer es cargar las librerías, esto es, el conjunto de funciones que vamos a utilizar para responder nuestra pregunta-problema. Aquí damos la bienvenida a Tidyverse: un conjunto de paquetes que tienen una manera similar de escribirse y utilizarse, facilitando el trabajo conjunto de las distintas librerías. La primera vez que se utiliza una librería, hay que descargarla con la función install.packages().\n\n#install.packages(\"tidyverse\") # instalamos el conjunto de librerías que componen la colección tidyverse\nlibrary(tidyverse) # cargamos las funciones para poder utilizarlas\n\nLuego, tenemos que cargar los datos que vamos a utilizar. La función dependerá del tipo de archivo que tengamos que cargar. Los tipos de archivos más comunes son .csv y .xlsx. Los datos están descargados de la plataforma Data CP.\nPara un acceso más simple, pueden consultar las fuentes de datos aquí. Si tienen problemas con la ruta, pueden saber dónde está parado R con la función getwd().\n\nCSVExcel\n\n\n\ndata &lt;- read_csv(\"data/encuentro_1/ARG_elecciones.csv\")\ndata\n\n# A tibble: 54,913 × 10\n   id        seccion Elecciones Partido Porcentaje Votos Participacion electores\n   &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;     &lt;dbl&gt;\n 1 BUENOS A… Adolfo… BALLOTAGE… BLANCO        1.19   134          79.2     14171\n 2 BUENOS A… Albert… BALLOTAGE… BLANCO        1.6    123          84.2      9147\n 3 BUENOS A… Almira… BALLOTAGE… BLANCO        1.37  4738          83.8    412578\n 4 BUENOS A… Arreci… BALLOTAGE… BLANCO        1.53   306          84.0     23840\n 5 BUENOS A… Avella… BALLOTAGE… BLANCO        1.61  3617          82.5    272641\n 6 BUENOS A… Ayacuc… BALLOTAGE… BLANCO        1.53   212          81.2     17022\n 7 BUENOS A… Azul, … BALLOTAGE… BLANCO        1.02   452          80.3     55060\n 8 BUENOS A… Bahia … BALLOTAGE… BLANCO        1.57  2948          80.4    233442\n 9 BUENOS A… Balcar… BALLOTAGE… BLANCO        1.01   312          81.9     37704\n10 BUENOS A… Barade… BALLOTAGE… BLANCO        1.03   230          82.1     27119\n# ℹ 54,903 more rows\n# ℹ 2 more variables: votantes &lt;dbl&gt;, Provincia &lt;chr&gt;\n\n\n\n\n\n#install.packages(\"readxl\") # en caso de error, instalar y cargar librería readxl \nlibrary(readxl)\ndata &lt;- read_excel(\"data/encuentro_1/ARG_elecciones.xlsx\")\ndata\n\n# A tibble: 54,913 × 10\n   id        seccion Elecciones Partido Porcentaje Votos Participacion electores\n   &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;     &lt;dbl&gt;\n 1 BUENOS A… Adolfo… BALLOTAGE… BLANCO        1.19   134          79.2     14171\n 2 BUENOS A… Albert… BALLOTAGE… BLANCO        1.6    123          84.2      9147\n 3 BUENOS A… Almira… BALLOTAGE… BLANCO        1.37  4738          83.8    412578\n 4 BUENOS A… Arreci… BALLOTAGE… BLANCO        1.53   306          84.0     23840\n 5 BUENOS A… Avella… BALLOTAGE… BLANCO        1.61  3617          82.5    272641\n 6 BUENOS A… Ayacuc… BALLOTAGE… BLANCO        1.53   212          81.2     17022\n 7 BUENOS A… Azul, … BALLOTAGE… BLANCO        1.02   452          80.3     55060\n 8 BUENOS A… Bahia … BALLOTAGE… BLANCO        1.57  2948          80.4    233442\n 9 BUENOS A… Balcar… BALLOTAGE… BLANCO        1.01   312          81.9     37704\n10 BUENOS A… Barade… BALLOTAGE… BLANCO        1.03   230          82.1     27119\n# ℹ 54,903 more rows\n# ℹ 2 more variables: votantes &lt;dbl&gt;, Provincia &lt;chr&gt;\n\n\n\n\n\nCuando utilizamos R vamos a estar utilizando objetos. El operador &lt;- se utiliza para asignar el resultado de una función a un objeto y se puede crear con botón alt + botón -. Los objetos pertenecen a una clase, lo que implica que se permiten ciertas operaciones y se restringen otras. Por ejemplo, a los números se les puede aplicar operaciones aritméticas, a las tablas se les puede consultar sus filas-columnas y a las cadenas de texto se las puede pasar a mayúsculas.\n\n# consultamos la clase de cada uno de los tres objetos\nclass(42)\n\n[1] \"numeric\"\n\nclass(data)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nclass(\"cadena de texto\")\n\n[1] \"character\"\n\n# aplicamos operaciones\n42 * 42\n\n[1] 1764\n\ndim(data)\n\n[1] 54913    10\n\ntoupper(\"cadena de texto\") # función para pasar a mayúscula una cadena de texto\n\n[1] \"CADENA DE TEXTO\"\n\n# qué pasa si no respetamos la clase\n# \"cadena de texto\" * \"cadena de texto\" \n# dim(42)\n\nLas últimas líneas del código anterior están comentadas, ya que ante el error se detiene la operación. Pueden probarlas por su cuenta eliminado el #, comando que abre un comentario: el código que sigue será ignorado por el programa.\nPara obtener la documentación de una función, podemos ejecutar un signo de pregunta y la función. Nos abrirá la documentación correspondiente en el panel derecho.\n\n# ?dim\n\nA los archivos del tipo data.frame podemos aplicarle distintas funciones para hacer una exploración rápida de qué hay dentro. Veamos algunas:\n\nglimpse(data) # exploramos nombres de columnas, tipo de datos, algunos primeros valores\n\nRows: 54,913\nColumns: 10\n$ id            &lt;chr&gt; \"BUENOS AIRES_ADOLFO ALSINA\", \"BUENOS AIRES_ALBERTI\", \"B…\n$ seccion       &lt;chr&gt; \"Adolfo Alsina, Buenos Aires\", \"Alberti, Buenos Aires\", …\n$ Elecciones    &lt;chr&gt; \"BALLOTAGE 2015\", \"BALLOTAGE 2015\", \"BALLOTAGE 2015\", \"B…\n$ Partido       &lt;chr&gt; \"BLANCO\", \"BLANCO\", \"BLANCO\", \"BLANCO\", \"BLANCO\", \"BLANC…\n$ Porcentaje    &lt;dbl&gt; 1.19, 1.60, 1.37, 1.53, 1.61, 1.53, 1.02, 1.57, 1.01, 1.…\n$ Votos         &lt;dbl&gt; 134, 123, 4738, 306, 3617, 212, 452, 2948, 312, 230, 317…\n$ Participacion &lt;dbl&gt; 79.22, 84.22, 83.77, 84.05, 82.52, 81.24, 80.30, 80.37, …\n$ electores     &lt;dbl&gt; 14171, 9147, 412578, 23840, 272641, 17022, 55060, 233442…\n$ votantes      &lt;dbl&gt; 11226, 7704, 345606, 20038, 224976, 13829, 44214, 187615…\n$ Provincia     &lt;chr&gt; \"BUENOS AIRES\", \"BUENOS AIRES\", \"BUENOS AIRES\", \"BUENOS …\n\ndim(data) # cantidad de filas y columnas \n\n[1] 54913    10\n\nsummary(data) # devuelve el tipo de datos que hay dentro de las columnas y, para aquellas columnas de tipo numéricas, devuelve algunas métricas de posición como valores mínimos, máximos, mediana, promedio. \n\n      id              seccion           Elecciones          Partido         \n Length:54913       Length:54913       Length:54913       Length:54913      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   Porcentaje          Votos        Participacion      electores      \n Min.   :  0.000   Min.   :     0   Min.   :  0.00   Min.   :      0  \n 1st Qu.:  0.320   1st Qu.:    37   1st Qu.: 69.93   1st Qu.:   9273  \n Median :  1.290   Median :   247   Median : 75.38   Median :  22116  \n Mean   :  9.997   Mean   :  4506   Mean   : 73.92   Mean   :  61369  \n 3rd Qu.:  8.760   3rd Qu.:  1989   3rd Qu.: 79.56   3rd Qu.:  60026  \n Max.   :100.000   Max.   :621106   Max.   :104.49   Max.   :1131854  \n NA's   :5         NA's   :3                                          \n    votantes       Provincia        \n Min.   :     0   Length:54913      \n 1st Qu.:  6923   Class :character  \n Median : 16283   Mode  :character  \n Mean   : 46094                     \n 3rd Qu.: 44921                     \n Max.   :879215                     \n                                    \n\n\nAhora bien, construimos una tabla con el voto en blanco por elecciones y calculamos el mismo como % de votantes de cada elección. Aquí vamos a bienvenir a el famoso pipe (%&gt;%). Este operador nos va a facilitar la lectura del código cuando querramos utilizar varias funciones sobre un mismo data.frame.\n\ntabla_blanco &lt;- data %&gt;%\nfilter(Partido == \"BLANCO\") %&gt;% # filtramos votos en blanco\ngroup_by(Elecciones) %&gt;%  # agrupamos por elecciones\nsummarise(blanco = sum(Votos), # sumamos votos en blanco\nvotantes = sum(votantes), #sumamos votantes\nblanco_per = blanco/votantes) %&gt;% # calculamos el porcentaje\nmutate(anio = str_sub(Elecciones,-4)) # creamos una nueva columna que indica el año de la elección\n\ntabla_blanco # mostramos el resultado\n\n# A tibble: 10 × 5\n   Elecciones      blanco votantes blanco_per anio \n   &lt;chr&gt;            &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;\n 1 BALLOTAGE 2015  305229 25738560     0.0119 2015 \n 2 BALLOTAGE 2023  417515 26863246     0.0155 2023 \n 3 GENERALES 2011  665223 21712009     0.0306 2011 \n 4 GENERALES 2015  596028 25223502     0.0236 2015 \n 5 GENERALES 2019  399751 26595503     0.0150 2019 \n 6 GENERALES 2023  554161 27100675     0.0204 2023 \n 7 PASO 2011           NA 22250504    NA      2011 \n 8 PASO 2015       989823 23204024     0.0427 2015 \n 9 PASO 2019       758988 24724014     0.0307 2019 \n10 PASO 2023      1148342 24016776     0.0478 2023 \n\n\n¡Qué interesante sería ver esta tabla en un gráfico! La librería predilecta para realizar gráficos en R es ggplot2. ggplot2 construye a los gráficos como capas: primero se inserta la base de datos (mediante el comando %&gt;%); luego se mapean los ejes x e y (mediante la función aes()); con la función geom_col() se indica realizar un gráfico de columnas y por último se agregan las capas de definiciones estéticas.\n\nlibrary(scales)\n# cambiamos el tipo de la columna para que tenga un orden\n\norden &lt;- c(\"PASO 2011\", \"GENERALES 2011\",\n\"PASO 2015\", \"GENERALES 2015\",\"BALLOTAGE 2015\",\n\"PASO 2019\", \"GENERALES 2019\",\n\"PASO 2023\", \"GENERALES 2023\",\"BALLOTAGE 2023\")\n\np &lt;- tabla_blanco %&gt;%\ndrop_na() %&gt;% # eliminamos elecciones sin valores\nggplot(aes(x=factor(Elecciones,orden), y=blanco_per, fill=anio))+ # indicamos qué variables vamos a utilizar\ngeom_col(show.legend=FALSE)+ # indicamos el tipo de gráfico. Geom_ es el prefijo para ver los distintos gráficos que pueden usarse\ntheme_minimal()+\ntheme(axis.text.x=element_text(angle=30, hjust=1))+ # rotamos las etiquetas de los ejes para que sean legibles\nlabs(title=\"% de voto en blanco en elecciones ejecutivas\",\nsubtitle=\"total nacional\", x=\"\", y=\"\", caption=\"Resultados provisorios en base a DINE\")+\nscale_fill_brewer(palette=\"Set2\")+ # elegimos una paleta para el argumento \"fill\"\nscale_y_continuous(labels=percent) # indicamos que el eje Y es un porcentaje\n\np\n\n\n\n\n\n\n\n\nPara finalizar, guardamos ambos elementos para poder recuperarlos localmente.\n\ntabla_blanco %&gt;% \nwrite_excel_csv(\"outputs/encuentro_1/arg_votos_blanco.csv\")\n\ntabla_blanco %&gt;% \nwrite_excel_csv(\"outputs/encuentro_1/arg_votos_blanco.xlsx\")\n\np # lo ejecutamos nuevamente para poder utilizar luego la función de guardado\nggsave(\"outputs/encuentro_1/arg_votos_blanco.jpg\") # guardamos la imagen con fondo blanco\nggsave(\"outputs/encuentro_1/arg_votos_blanco.png\") # guardamos la imagen sin fondo"
  },
  {
    "objectID": "visualizacion.html",
    "href": "visualizacion.html",
    "title": "4. Visualización",
    "section": "",
    "text": "4. Visualización"
  },
  {
    "objectID": "procesamiento.html",
    "href": "procesamiento.html",
    "title": "2. Procesamiento",
    "section": "",
    "text": "La idea de este apartado es entender más a fondo cómo trabajar tablas para poder hacer análisis y visualización. Será necesario ver algunas cuestiones de ejecución básica de R y algunas funciones típicas de Tidyverse para limpiar y transformar nuestra base de datos. Un pequeño punteo:\n\ntipos de objetos\noperadores\nfunciones de lectura y escritura de archivos\nfunciones de resumen y exploración de una base de datos\nfunciones de transformación de columnas y valores\nformas típicas de ordenar una base de datos (wide, long)\nunión y consolidación de distintas tablas\n\nEmpecemos.\n\n\nSe mantendrá la tradición: definiremos una guía analítica para que las operaciones que hagamos tengan un sentido claro y sea más sencillo entender cuál es la información relevante.\nEn este caso nos vamos a seguir preguntando por el voto en blanco en las elecciones argentinas. ¿Qué particularidades presenta en las distintas provincias?\n\n\n\nLos datos electorales son una fuente compleja de abordar por el volumen de información que conlleva. El dataset completo está disponible en https://www.argentina.gob.ar/dine/resultados-electorales/elecciones-2023 y vamos a estar utilizando el de las elecciones generales de 2023. No olviden descomprimir el archivo luego de descargarlo. Lo interesante de tomar este tipo de datos es el nivel de desagregación: tenemos resultados por mesa. En los comicios locales, cada mesa pertenece a un circuito, cada circuito pertenence a una sección y cada sección pertenece a un distrito. Por poner un ejemplo: tenemos la mesa 12 en el circuito 12A pertenenciente a la sección Comuna 12 del distrito Capital Federal. Salvo las mesas, todos los niveles de agregación tienen un código y un nombre. Por ejemplo, la Provincia de Buenos Aires es el distrito n° 2 y Luján es la sección n° 71.\nVamos primero a cargar la librería de Tidyverse. En general, la carga de todas las librerías necesarias se realiza al principio del script, por una cuestión de estructura general (sirve para saber si tenemos instaladas todas las necesarias, qué tipo de funciones vamos a utilizar, etc.).\n\nlibrary(tidyverse)\n\n\n\n\nEn la programación hay distintas lógicas de construcción de lenguajes. R se inscribe dentro de la programación orientada a objetos, es decir, cada elemento es tratado como un objeto. No vamos a profundizar, pero nos va a servir saber que una de las características esenciales de los objetos es que pertenencen a una clase. ¿Qué implica? La clase del objeto va a determinar un conjunto de propiedades y operaciones que podemos aplicar en dicho objeto. Los tipos o clases de objetos que vamos a estar utilizando son:\nSimples\n\ncharacter: texto.\nnumeric: números.\nlogical o bool: puede ser verdadero (TRUE) o falso (FALSE).\n\nCompuestos\n\nvector: lista de elementos del mismo tipo; unidimensional.\ndataframe: lo que usualmente llamamos tablas. Tienen filas y columnas.\n\nHay ciertas palabras y caracteres en los lenguajes de programación que están reservados para funciones específicas; en general cambian de color en Rstudio. Esas palabras reservadas no se pueden usar para nombrar objetos nuevos, por ejemplo.\n\n# veamos las diferencias entre escribir la misma palabra de distintas formas\nclass(FALSE)\n\n[1] \"logical\"\n\n#class(False)\nclass(\"False\")\n\n[1] \"character\"\n\n\nUn repaso rápido por los operadores más comunes nos muestra los siguientes.\n\n# operadores aritméticos\n10 + 10 # suma\n\n[1] 20\n\n10 - 10 # resta\n\n[1] 0\n\n10 * 2 # multiplicación\n\n[1] 20\n\n10 / 2 # división\n\n[1] 5\n\n10**2 # elevación\n\n[1] 100\n\n# operadores de relación\n2 &gt; 10 # menor\n\n[1] FALSE\n\n10 &gt; 10 # mayor\n\n[1] FALSE\n\n10 &gt;= 10 # mayor\n\n[1] TRUE\n\n\"karl\" == \"marx\" # es igual\n\n[1] FALSE\n\n\"karl\" != \"marx\" # es distinto\n\n[1] TRUE\n\n\"marx\" %in% c(\"marx\", \"durkheim\", \"weber\") # está presente en \n\n[1] TRUE\n\n# operadores lógicos\nTRUE & FALSE # operador lógico \"Y\"\n\n[1] FALSE\n\nTRUE | FALSE # operador lógico \"O\"\n\n[1] TRUE\n\n# de asignación\na = 2 #asignamos lo que está a la derecha a lo que está a la izquierda del operador\na\n\n[1] 2\n\nb &lt;- 3 # idem\nb\n\n[1] 3\n\n\nCarguemos nuestra base de datos para arrancar.\n\n\n\nCarguemos sólo 6000 filas, sabiendo que es un dataset muy grande y que quizás se demore mucho cargar toda la base de primera. Veamos una parte para entender la estructura.\n\nruta &lt;- \"data/encuentro_2/2023_Generales/ResultadosElectorales_2023.csv\"\ndata &lt;- read_csv(ruta, n_max=6000) # cargamos sólo 6000 filas\ndata\n\n# A tibble: 6,000 × 23\n     año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre    \n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;              \n 1  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 2  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 3  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 4  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 5  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 6  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 7  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 8  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 9  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n10  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n# ℹ 5,990 more rows\n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;\n\n\nLa mayor particularidad de los resultados electorales es tener formato long (largo). En el formato long, cada fila de la tabla representa una observación única para una combinación específica de variables. Es útil para trabajar con datos que necesitan ser agrupados o resumidos fácilmente. Cada variable está dividida en dos columnas: una para el nombre de la variable y otra para su valor. El formato alternativo es wide, donde cada fila representa una observación única y cada columna representa una variable diferente. Es útil cuando se necesita acceder rápidamente a las variables individuales sin necesidad de realizar transformaciones adicionales.\n\n\n\nformatos de tabla\n\n\nEn la base hay un gran número de columnas, que podemos explorar con la función names(). También hay elecciones a distintos cargos, como legislativos.\n\nnames(data)\n\n [1] \"año\"                      \"eleccion_tipo\"           \n [3] \"recuento_tipo\"            \"padron_tipo\"             \n [5] \"distrito_id\"              \"distrito_nombre\"         \n [7] \"seccionprovincial_id\"     \"seccionprovincial_nombre\"\n [9] \"seccion_id\"               \"seccion_nombre\"          \n[11] \"circuito_id\"              \"circuito_nombre\"         \n[13] \"mesa_id\"                  \"mesa_tipo\"               \n[15] \"mesa_electores\"           \"cargo_id\"                \n[17] \"cargo_nombre\"             \"agrupacion_id\"           \n[19] \"agrupacion_nombre\"        \"lista_numero\"            \n[21] \"lista_nombre\"             \"votos_tipo\"              \n[23] \"votos_cantidad\"          \n\ntable(data$cargo_nombre)\n\n\nPRESIDENTE Y VICE  SENADOR NACIONAL \n             5844               156 \n\n\nVamos a cargar la base completa pero usando una función especial para ir filtrando los casos antes de cargar la base, para que nos pese menos el objeto y podamos manipularlo con comodidad.\n\nf &lt;- function(x, pos){\n  filter(x,(cargo_nombre == \"PRESIDENTE Y VICE\"))\n}\ndata &lt;- read_csv_chunked(ruta, DataFrameCallback$new(f), chunk_size=10000)\ndim(data) # vemos cuántas filas y columnas tiene\n\n[1] 1045200      23\n\nhead(data) # vemos las primeras 5 filas\n\n# A tibble: 6 × 23\n    año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre     \n  &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;               \n1  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de …\n2  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de …\n3  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de …\n4  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de …\n5  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de …\n6  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de …\n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;\n\n\n\n\n\nProbablemente en la mayoría de los casos una base de datos venga con más información de la necesaria. Una de nuestras primeras tareas en el procesamiento de una base de datos va a ser recortar para quedarnos sólo con las filas y columnas que nos sirven. Tomar esas definiciones va a requerir un primer paneo general de la información que contiene la base de datos.\nExisten funciones que nos van a resumir, a grandes rasgos, la totalidad de la base.\n\nglimpse(data) # ¡hay otras de este tipo en el primer encuentro!\n\nRows: 1,045,200\nColumns: 23\n$ año                      &lt;dbl&gt; 2023, 2023, 2023, 2023, 2023, 2023, 2023, 202…\n$ eleccion_tipo            &lt;chr&gt; \"GENERAL\", \"GENERAL\", \"GENERAL\", \"GENERAL\", \"…\n$ recuento_tipo            &lt;chr&gt; \"PROVISORIO\", \"PROVISORIO\", \"PROVISORIO\", \"PR…\n$ padron_tipo              &lt;chr&gt; \"NORMAL\", \"NORMAL\", \"NORMAL\", \"NORMAL\", \"NORM…\n$ distrito_id              &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ distrito_nombre          &lt;chr&gt; \"Ciudad Autónoma de Buenos Aires\", \"Ciudad Au…\n$ seccionprovincial_id     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ seccionprovincial_nombre &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ seccion_id               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ seccion_nombre           &lt;chr&gt; \"Comuna 01\", \"Comuna 01\", \"Comuna 01\", \"Comun…\n$ circuito_id              &lt;chr&gt; \"00018\", \"00018\", \"00018\", \"00018\", \"00018\", …\n$ circuito_nombre          &lt;chr&gt; \"00018\", \"00018\", \"00018\", \"00018\", \"00018\", …\n$ mesa_id                  &lt;dbl&gt; 474, 474, 474, 474, 475, 475, 475, 475, 475, …\n$ mesa_tipo                &lt;chr&gt; \"NATIVOS\", \"NATIVOS\", \"NATIVOS\", \"NATIVOS\", \"…\n$ mesa_electores           &lt;dbl&gt; 343, 343, 343, 343, 349, 349, 349, 349, 349, …\n$ cargo_id                 &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ cargo_nombre             &lt;chr&gt; \"PRESIDENTE Y VICE\", \"PRESIDENTE Y VICE\", \"PR…\n$ agrupacion_id            &lt;dbl&gt; 0, 0, 0, 0, 134, 132, 135, 136, 133, 0, 0, 0,…\n$ agrupacion_nombre        &lt;chr&gt; NA, NA, NA, NA, \"UNION POR LA PATRIA\", \"JUNTO…\n$ lista_numero             &lt;dbl&gt; 0, 0, 0, 0, NA, NA, NA, NA, NA, 0, 0, 0, 0, 0…\n$ lista_nombre             &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ votos_tipo               &lt;chr&gt; \"NULO\", \"IMPUGNADO\", \"RECURRIDO\", \"COMANDO\", …\n$ votos_cantidad           &lt;dbl&gt; 0, 0, 0, 0, 95, 59, 57, 9, 4, 4, 3, 0, 0, 0, …\n\n\nQuizás queremos ver algunas filas completas.\n\nhead(data, 10) # un top N de filas\n\n# A tibble: 10 × 23\n     año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre    \n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;              \n 1  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 2  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 3  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 4  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 5  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 6  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 7  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 8  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 9  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n10  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;\n\ntail(data, 10) # las últimas N filas \n\n# A tibble: 10 × 23\n     año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre    \n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;              \n 1  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n 2  2023 GENERAL       PROVISORIO    NORMAL               17 Salta              \n 3  2023 GENERAL       PROVISORIO    NORMAL               23 Tucumán            \n 4  2023 GENERAL       PROVISORIO    NORMAL               10 Jujuy              \n 5  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n 6  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n 7  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n 8  2023 GENERAL       PROVISORIO    NORMAL               22 Santiago del Estero\n 9  2023 GENERAL       PROVISORIO    NORMAL               14 Misiones           \n10  2023 GENERAL       PROVISORIO    NORMAL               18 San Juan           \n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;\n\nsample_n(data, 10) # 10 filas al azar\n\n# A tibble: 10 × 23\n     año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre    \n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;              \n 1  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n 2  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n 3  2023 GENERAL       PROVISORIO    NORMAL               10 Jujuy              \n 4  2023 GENERAL       PROVISORIO    NORMAL               15 Neuquén            \n 5  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n 6  2023 GENERAL       PROVISORIO    NORMAL               17 Salta              \n 7  2023 GENERAL       PROVISORIO    NORMAL                4 Córdoba            \n 8  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n 9  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n10  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;\n\n\nQuizás queremos contar apariciones de algunos valores.\n\ndata$votos_tipo %&gt;% # contamos apariciones de tipo de votos hay, en absolutos \n  table() \n\n.\n  COMANDO EN BLANCO IMPUGNADO      NULO  POSITIVO RECURRIDO \n   104520    104520    104520    104520    522600    104520 \n\ndata$distrito_nombre %&gt;% # contamos % de apariciones de distritos\n  table() %&gt;%\n  prop.table() %&gt;% \n  round(digits=4)*100\n\n.\n                                         Buenos Aires \n                                                36.43 \n                                            Catamarca \n                                                 1.01 \n                                                Chaco \n                                                 2.82 \n                                               Chubut \n                                                 1.35 \n                      Ciudad Autónoma de Buenos Aires \n                                                 7.01 \n                                              Córdoba \n                                                 8.70 \n                                           Corrientes \n                                                 2.64 \n                                           Entre Ríos \n                                                 3.28 \n                                              Formosa \n                                                 1.42 \n                                                Jujuy \n                                                 1.75 \n                                             La Pampa \n                                                 0.86 \n                                             La Rioja \n                                                 0.91 \n                                              Mendoza \n                                                 4.17 \n                                             Misiones \n                                                 2.75 \n                                              Neuquén \n                                                 1.60 \n                                            Río Negro \n                                                 1.71 \n                                                Salta \n                                                 3.15 \n                                             San Juan \n                                                 1.73 \n                                             San Luis \n                                                 1.25 \n                                           Santa Cruz \n                                                 0.87 \n                                             Santa Fe \n                                                 7.97 \n                                  Santiago del Estero \n                                                 2.36 \nTierra del Fuego, Antártida e Islas del Atlántico Sur \n                                                 0.49 \n                                              Tucumán \n                                                 3.75 \n\n\nQuizás queremos saber, de manera más general, cuántos valores únicos tiene cada una de las columnas.\n\nsapply(data, n_distinct) # sapply sirve para aplicar una función a todas las columnas\n\n                     año            eleccion_tipo            recuento_tipo \n                       1                        1                        1 \n             padron_tipo              distrito_id          distrito_nombre \n                       1                       24                       24 \n    seccionprovincial_id seccionprovincial_nombre               seccion_id \n                       9                       12                      135 \n          seccion_nombre              circuito_id          circuito_nombre \n                     446                     2335                     2335 \n                 mesa_id                mesa_tipo           mesa_electores \n                    9097                        1                      378 \n                cargo_id             cargo_nombre            agrupacion_id \n                       1                        1                        6 \n       agrupacion_nombre             lista_numero             lista_nombre \n                       6                        2                        1 \n              votos_tipo           votos_cantidad \n                       6                      264 \n\n\nPuntos interesantes hasta este punto: hay más de un millón de filas; cada una representa un tipo de voto en una mesa en particular; cada nivel de geográfico (distrito, sección, circuito), el cargo y la agrupación tiene id y nombre; al menos 8 columnas tienen un sólo valor, por lo que no nos sirven para esta base de datos.\nPara seleccionar filas y columnas vamos a utilizar las funciones filter() y select(), dos estrellas de Tidyverse.\n\n# filter recibe un dataframe y una condición\ndata %&gt;% \n  filter(distrito_nombre == \"Buenos Aires\") # filtramos sólo los casos de Buenos Aires\n\n# A tibble: 380,740 × 23\n     año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre\n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;          \n 1  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 2  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 3  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 4  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 5  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 6  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 7  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 8  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 9  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n10  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n# ℹ 380,730 more rows\n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;\n\n# podríamos querer filtrar por más de una condición\ndata %&gt;% \n  filter(distrito_nombre == \"Buenos Aires\" & votos_cantidad &gt; 200) # ¿por qué haríamos eso? sólo para mostrar cómo funcionan las condiciones\n\n# A tibble: 54 × 23\n     año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre\n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;          \n 1  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 2  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 3  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 4  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 5  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 6  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 7  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 8  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 9  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n10  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n# ℹ 44 more rows\n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;\n\n# podemos jugar con otros operadores lógicos\ndata %&gt;% \n  filter(distrito_nombre==\"Buenos Aires\" | votos_tipo != \"POSITIVO\")\n\n# A tibble: 712,970 × 23\n     año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre    \n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;              \n 1  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 2  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 3  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 4  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 5  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 6  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 7  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 8  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 9  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n10  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n# ℹ 712,960 more rows\n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;\n\ndata %&gt;% \n  filter(distrito_nombre %in% c(\"Buenos Aires\",\"Ciudad Autónoma de Buenos Aires\"))\n\n# A tibble: 454,000 × 23\n     año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre    \n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;              \n 1  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 2  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 3  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 4  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 5  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 6  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 7  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 8  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 9  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n10  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n# ℹ 453,990 more rows\n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;\n\n\nPara seleccionar, select() nos da una diversidad muy interesante e intuitiva de opciones.\n\n# podemos querer seleccionar una columna específica\ndata %&gt;% \n  select(distrito_id)\n\n# A tibble: 1,045,200 × 1\n   distrito_id\n         &lt;dbl&gt;\n 1           1\n 2           1\n 3           1\n 4           1\n 5           1\n 6           1\n 7           1\n 8           1\n 9           1\n10           1\n# ℹ 1,045,190 more rows\n\n# o varias columnas\ndata %&gt;% \n  select(distrito_id, distrito_nombre)\n\n# A tibble: 1,045,200 × 2\n   distrito_id distrito_nombre                \n         &lt;dbl&gt; &lt;chr&gt;                          \n 1           1 Ciudad Autónoma de Buenos Aires\n 2           1 Ciudad Autónoma de Buenos Aires\n 3           1 Ciudad Autónoma de Buenos Aires\n 4           1 Ciudad Autónoma de Buenos Aires\n 5           1 Ciudad Autónoma de Buenos Aires\n 6           1 Ciudad Autónoma de Buenos Aires\n 7           1 Ciudad Autónoma de Buenos Aires\n 8           1 Ciudad Autónoma de Buenos Aires\n 9           1 Ciudad Autónoma de Buenos Aires\n10           1 Ciudad Autónoma de Buenos Aires\n# ℹ 1,045,190 more rows\n\n# si lo pasamos como vector, hay que incluir las comillas\ndata %&gt;% \n  select(c(\"distrito_id\", \"distrito_nombre\"))\n\n# A tibble: 1,045,200 × 2\n   distrito_id distrito_nombre                \n         &lt;dbl&gt; &lt;chr&gt;                          \n 1           1 Ciudad Autónoma de Buenos Aires\n 2           1 Ciudad Autónoma de Buenos Aires\n 3           1 Ciudad Autónoma de Buenos Aires\n 4           1 Ciudad Autónoma de Buenos Aires\n 5           1 Ciudad Autónoma de Buenos Aires\n 6           1 Ciudad Autónoma de Buenos Aires\n 7           1 Ciudad Autónoma de Buenos Aires\n 8           1 Ciudad Autónoma de Buenos Aires\n 9           1 Ciudad Autónoma de Buenos Aires\n10           1 Ciudad Autónoma de Buenos Aires\n# ℹ 1,045,190 more rows\n\n# podemos querer filtrar un subconjunto continuo de columnas\ndata %&gt;% \n  select(distrito_id:lista_nombre)\n\n# A tibble: 1,045,200 × 17\n   distrito_id distrito_nombre       seccionprovincial_id seccionprovincial_no…¹\n         &lt;dbl&gt; &lt;chr&gt;                                &lt;dbl&gt; &lt;chr&gt;                 \n 1           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 2           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 3           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 4           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 5           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 6           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 7           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 8           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 9           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n10           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n# ℹ 1,045,190 more rows\n# ℹ abbreviated name: ¹​seccionprovincial_nombre\n# ℹ 13 more variables: seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;\n\n# o podemos querer negar una condición\ndata %&gt;% \n  select(!distrito_id:lista_nombre)\n\n# A tibble: 1,045,200 × 6\n     año eleccion_tipo recuento_tipo padron_tipo votos_tipo votos_cantidad\n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt;               &lt;dbl&gt;\n 1  2023 GENERAL       PROVISORIO    NORMAL      NULO                    0\n 2  2023 GENERAL       PROVISORIO    NORMAL      IMPUGNADO               0\n 3  2023 GENERAL       PROVISORIO    NORMAL      RECURRIDO               0\n 4  2023 GENERAL       PROVISORIO    NORMAL      COMANDO                 0\n 5  2023 GENERAL       PROVISORIO    NORMAL      POSITIVO               95\n 6  2023 GENERAL       PROVISORIO    NORMAL      POSITIVO               59\n 7  2023 GENERAL       PROVISORIO    NORMAL      POSITIVO               57\n 8  2023 GENERAL       PROVISORIO    NORMAL      POSITIVO                9\n 9  2023 GENERAL       PROVISORIO    NORMAL      POSITIVO                4\n10  2023 GENERAL       PROVISORIO    NORMAL      EN BLANCO               4\n# ℹ 1,045,190 more rows\n\n# podemos filtrar según el nombre de la columna\ndata %&gt;% \n  select(ends_with(\"nombre\"))\n\n# A tibble: 1,045,200 × 7\n   distrito_nombre         seccionprovincial_no…¹ seccion_nombre circuito_nombre\n   &lt;chr&gt;                   &lt;chr&gt;                  &lt;chr&gt;          &lt;chr&gt;          \n 1 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n 2 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n 3 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n 4 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n 5 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n 6 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n 7 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n 8 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n 9 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n10 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n# ℹ 1,045,190 more rows\n# ℹ abbreviated name: ¹​seccionprovincial_nombre\n# ℹ 3 more variables: cargo_nombre &lt;chr&gt;, agrupacion_nombre &lt;chr&gt;,\n#   lista_nombre &lt;lgl&gt;\n\n# y agregar condiciones\ndata %&gt;% \n  select(starts_with(\"distrito\") | starts_with(\"seccion\"))\n\n# A tibble: 1,045,200 × 6\n   distrito_id distrito_nombre       seccionprovincial_id seccionprovincial_no…¹\n         &lt;dbl&gt; &lt;chr&gt;                                &lt;dbl&gt; &lt;chr&gt;                 \n 1           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 2           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 3           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 4           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 5           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 6           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 7           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 8           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 9           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n10           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n# ℹ 1,045,190 more rows\n# ℹ abbreviated name: ¹​seccionprovincial_nombre\n# ℹ 2 more variables: seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;\n\n\nEn este caso, vamos a quedarnos con las columnas que tienen más de 1 valor único. No hará falta filtrar todavía.\n\ncols_sin_valores &lt;- data %&gt;% \n  sapply(n_distinct) %&gt;% \n  as.data.frame() %&gt;% \n  rename(n_distinct_values = 1) %&gt;% # asigno nombre \n  filter(n_distinct_values == 1) %&gt;% # filtro\n  rownames()\n\ncols_sin_valores\n\n[1] \"año\"           \"eleccion_tipo\" \"recuento_tipo\" \"padron_tipo\"  \n[5] \"mesa_tipo\"     \"cargo_id\"      \"cargo_nombre\"  \"lista_nombre\" \n\ndata &lt;- data %&gt;% \n  select(!cols_sin_valores) %&gt;% \n  select(!ends_with(\"id\")) %&gt;% \n  select(!c(\"lista_numero\")) %&gt;% \n  select(!(starts_with(\"seccion\") | starts_with(\"circuito\") | starts_with(\"mesa\")))\n\n\n\n\nLimpiar y transformar una base de datos es un proceso creativo que implica adaptar las variables según el uso que se le va a dar. Se dice creativo porque, si bien hay ciertas funciones y procesos frecuentes, varía mucho según cada proyecto y origen de la base. Mutate() es una de las funciones más importantes para este momento.\nMutate() sirve para crear, modificar o eliminar columnas. Es como un gran paragüas donde vamos a insertar las modificaciones.\n\n# podríamos querer crear una variable con un valor único de texto o numérico\ndata %&gt;% \n  mutate(nueva_variable = \"valor único\", \n         nueva_variable_num = 42)\n\n# A tibble: 1,045,200 × 6\n   distrito_nombre    agrupacion_nombre votos_tipo votos_cantidad nueva_variable\n   &lt;chr&gt;              &lt;chr&gt;             &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;         \n 1 Ciudad Autónoma d… &lt;NA&gt;              NULO                    0 valor único   \n 2 Ciudad Autónoma d… &lt;NA&gt;              IMPUGNADO               0 valor único   \n 3 Ciudad Autónoma d… &lt;NA&gt;              RECURRIDO               0 valor único   \n 4 Ciudad Autónoma d… &lt;NA&gt;              COMANDO                 0 valor único   \n 5 Ciudad Autónoma d… UNION POR LA PAT… POSITIVO               95 valor único   \n 6 Ciudad Autónoma d… JUNTOS POR EL CA… POSITIVO               59 valor único   \n 7 Ciudad Autónoma d… LA LIBERTAD AVAN… POSITIVO               57 valor único   \n 8 Ciudad Autónoma d… FRENTE DE IZQUIE… POSITIVO                9 valor único   \n 9 Ciudad Autónoma d… HACEMOS POR NUES… POSITIVO                4 valor único   \n10 Ciudad Autónoma d… &lt;NA&gt;              EN BLANCO               4 valor único   \n# ℹ 1,045,190 more rows\n# ℹ 1 more variable: nueva_variable_num &lt;dbl&gt;\n\n# podríamos querer crear una variable que se desprenda de otras columnas o modificar las existentes\ndata %&gt;% \n  mutate(max_votos = max(votos_cantidad), \n         votos_div = votos_cantidad / max_votos, \n         distrito_nombre_minusc = tolower(distrito_nombre), \n         distrito_nombre = toupper(distrito_nombre))\n\n# A tibble: 1,045,200 × 7\n   distrito_nombre         agrupacion_nombre votos_tipo votos_cantidad max_votos\n   &lt;chr&gt;                   &lt;chr&gt;             &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;\n 1 CIUDAD AUTÓNOMA DE BUE… &lt;NA&gt;              NULO                    0       300\n 2 CIUDAD AUTÓNOMA DE BUE… &lt;NA&gt;              IMPUGNADO               0       300\n 3 CIUDAD AUTÓNOMA DE BUE… &lt;NA&gt;              RECURRIDO               0       300\n 4 CIUDAD AUTÓNOMA DE BUE… &lt;NA&gt;              COMANDO                 0       300\n 5 CIUDAD AUTÓNOMA DE BUE… UNION POR LA PAT… POSITIVO               95       300\n 6 CIUDAD AUTÓNOMA DE BUE… JUNTOS POR EL CA… POSITIVO               59       300\n 7 CIUDAD AUTÓNOMA DE BUE… LA LIBERTAD AVAN… POSITIVO               57       300\n 8 CIUDAD AUTÓNOMA DE BUE… FRENTE DE IZQUIE… POSITIVO                9       300\n 9 CIUDAD AUTÓNOMA DE BUE… HACEMOS POR NUES… POSITIVO                4       300\n10 CIUDAD AUTÓNOMA DE BUE… &lt;NA&gt;              EN BLANCO               4       300\n# ℹ 1,045,190 more rows\n# ℹ 2 more variables: votos_div &lt;dbl&gt;, distrito_nombre_minusc &lt;chr&gt;\n\n# podríamos querer recategorizar una variable\ndata %&gt;% \n  mutate(votos_cantidad_grupo = case_when(votos_cantidad &gt; 60 ~ \"mayor a 60 votos\",\n                                          votos_cantidad &lt;= 60 ~ \"menor o igual a 60 votos\"))\n\n# A tibble: 1,045,200 × 5\n   distrito_nombre                 agrupacion_nombre   votos_tipo votos_cantidad\n   &lt;chr&gt;                           &lt;chr&gt;               &lt;chr&gt;               &lt;dbl&gt;\n 1 Ciudad Autónoma de Buenos Aires &lt;NA&gt;                NULO                    0\n 2 Ciudad Autónoma de Buenos Aires &lt;NA&gt;                IMPUGNADO               0\n 3 Ciudad Autónoma de Buenos Aires &lt;NA&gt;                RECURRIDO               0\n 4 Ciudad Autónoma de Buenos Aires &lt;NA&gt;                COMANDO                 0\n 5 Ciudad Autónoma de Buenos Aires UNION POR LA PATRIA POSITIVO               95\n 6 Ciudad Autónoma de Buenos Aires JUNTOS POR EL CAMB… POSITIVO               59\n 7 Ciudad Autónoma de Buenos Aires LA LIBERTAD AVANZA  POSITIVO               57\n 8 Ciudad Autónoma de Buenos Aires FRENTE DE IZQUIERD… POSITIVO                9\n 9 Ciudad Autónoma de Buenos Aires HACEMOS POR NUESTR… POSITIVO                4\n10 Ciudad Autónoma de Buenos Aires &lt;NA&gt;                EN BLANCO               4\n# ℹ 1,045,190 more rows\n# ℹ 1 more variable: votos_cantidad_grupo &lt;chr&gt;\n\ndata %&gt;% \n  mutate(votos_tipo_recat = case_when(votos_tipo %in% c(\"NULO\",\"IMPUGNADO\",\"RECURRIDO\",\"COMANDO\",\"EN BLANCO\") ~ \"NEGATIVO\", \n                                      .default = as.character(votos_tipo)))\n\n# A tibble: 1,045,200 × 5\n   distrito_nombre  agrupacion_nombre votos_tipo votos_cantidad votos_tipo_recat\n   &lt;chr&gt;            &lt;chr&gt;             &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;           \n 1 Ciudad Autónoma… &lt;NA&gt;              NULO                    0 NEGATIVO        \n 2 Ciudad Autónoma… &lt;NA&gt;              IMPUGNADO               0 NEGATIVO        \n 3 Ciudad Autónoma… &lt;NA&gt;              RECURRIDO               0 NEGATIVO        \n 4 Ciudad Autónoma… &lt;NA&gt;              COMANDO                 0 NEGATIVO        \n 5 Ciudad Autónoma… UNION POR LA PAT… POSITIVO               95 POSITIVO        \n 6 Ciudad Autónoma… JUNTOS POR EL CA… POSITIVO               59 POSITIVO        \n 7 Ciudad Autónoma… LA LIBERTAD AVAN… POSITIVO               57 POSITIVO        \n 8 Ciudad Autónoma… FRENTE DE IZQUIE… POSITIVO                9 POSITIVO        \n 9 Ciudad Autónoma… HACEMOS POR NUES… POSITIVO                4 POSITIVO        \n10 Ciudad Autónoma… &lt;NA&gt;              EN BLANCO               4 NEGATIVO        \n# ℹ 1,045,190 more rows\n\ndata %&gt;% \n  mutate(votos_agrupado = case_when(votos_tipo %in% c(\"NULO\",\"IMPUGNADO\",\"RECURRIDO\",\"COMANDO\",\"EN BLANCO\") ~ \"NEGATIVO\",\n                                      .default = as.character(agrupacion_nombre)),\n         votos_agrupado_v2 = case_when(is.na(agrupacion_nombre) ~ \"NEGATIVO\",\n                                       .default = as.character(agrupacion_nombre)))\n\n# A tibble: 1,045,200 × 6\n   distrito_nombre    agrupacion_nombre votos_tipo votos_cantidad votos_agrupado\n   &lt;chr&gt;              &lt;chr&gt;             &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;         \n 1 Ciudad Autónoma d… &lt;NA&gt;              NULO                    0 NEGATIVO      \n 2 Ciudad Autónoma d… &lt;NA&gt;              IMPUGNADO               0 NEGATIVO      \n 3 Ciudad Autónoma d… &lt;NA&gt;              RECURRIDO               0 NEGATIVO      \n 4 Ciudad Autónoma d… &lt;NA&gt;              COMANDO                 0 NEGATIVO      \n 5 Ciudad Autónoma d… UNION POR LA PAT… POSITIVO               95 UNION POR LA …\n 6 Ciudad Autónoma d… JUNTOS POR EL CA… POSITIVO               59 JUNTOS POR EL…\n 7 Ciudad Autónoma d… LA LIBERTAD AVAN… POSITIVO               57 LA LIBERTAD A…\n 8 Ciudad Autónoma d… FRENTE DE IZQUIE… POSITIVO                9 FRENTE DE IZQ…\n 9 Ciudad Autónoma d… HACEMOS POR NUES… POSITIVO                4 HACEMOS POR N…\n10 Ciudad Autónoma d… &lt;NA&gt;              EN BLANCO               4 NEGATIVO      \n# ℹ 1,045,190 more rows\n# ℹ 1 more variable: votos_agrupado_v2 &lt;chr&gt;\n\n# vamos a hacer una columna con nombres reducidos para utilizar con comodidad\ndata &lt;- data %&gt;% \n  mutate(votos_agrupado = case_when(is.na(agrupacion_nombre) ~ \"NEGATIVO\",\n                                       .default = as.character(agrupacion_nombre)), \n         votos_agrupado_red = case_when(votos_agrupado == \"NEGATIVO\" ~ \"NEG\",\n                                        votos_agrupado == \"UNION POR LA PATRIA\" ~ \"UXP\",\n                                        votos_agrupado == \"JUNTOS POR EL CAMBIO\" ~ \"JXC\",\n                                        votos_agrupado == \"LA LIBERTAD AVANZA\" ~ \"LLA\",\n                                        votos_agrupado == \"FRENTE DE IZQUIERDA Y DE TRABAJADORES - UNIDAD\" ~ \"FIT\",\n                                        votos_agrupado == \"HACEMOS POR NUESTRO PAIS\" ~ \"HNP\"), \n         distrito_nombre_red = stringi::stri_trans_general(distrito_nombre, id=\"Latin-ASCII\"), \n         distrito_nombre_red = tolower(distrito_nombre_red), \n         distrito_nombre_red = gsub(\" \", \"_\", distrito_nombre_red))\n\ndata\n\n# A tibble: 1,045,200 × 7\n   distrito_nombre    agrupacion_nombre votos_tipo votos_cantidad votos_agrupado\n   &lt;chr&gt;              &lt;chr&gt;             &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;         \n 1 Ciudad Autónoma d… &lt;NA&gt;              NULO                    0 NEGATIVO      \n 2 Ciudad Autónoma d… &lt;NA&gt;              IMPUGNADO               0 NEGATIVO      \n 3 Ciudad Autónoma d… &lt;NA&gt;              RECURRIDO               0 NEGATIVO      \n 4 Ciudad Autónoma d… &lt;NA&gt;              COMANDO                 0 NEGATIVO      \n 5 Ciudad Autónoma d… UNION POR LA PAT… POSITIVO               95 UNION POR LA …\n 6 Ciudad Autónoma d… JUNTOS POR EL CA… POSITIVO               59 JUNTOS POR EL…\n 7 Ciudad Autónoma d… LA LIBERTAD AVAN… POSITIVO               57 LA LIBERTAD A…\n 8 Ciudad Autónoma d… FRENTE DE IZQUIE… POSITIVO                9 FRENTE DE IZQ…\n 9 Ciudad Autónoma d… HACEMOS POR NUES… POSITIVO                4 HACEMOS POR N…\n10 Ciudad Autónoma d… &lt;NA&gt;              EN BLANCO               4 NEGATIVO      \n# ℹ 1,045,190 more rows\n# ℹ 2 more variables: votos_agrupado_red &lt;chr&gt;, distrito_nombre_red &lt;chr&gt;\n\n\n\n\n\nQuizás sea más cómodo alternar entre formato long y wide. Para aquellos casos, pivot_longer() y pivot_wider() nos van a servir.\n\ndata_agrupada &lt;- data %&gt;% \n  group_by(distrito_nombre, votos_agrupado_red) %&gt;% # como tenemos una fila por mesa/agrupación y necesitamos sólo una por provincia, vamos a agrupar y sumar\n  summarise(votos_cantidad = sum(votos_cantidad)) \ndata_agrupada\n\n# A tibble: 144 × 3\n# Groups:   distrito_nombre [24]\n   distrito_nombre votos_agrupado_red votos_cantidad\n   &lt;chr&gt;           &lt;chr&gt;                       &lt;dbl&gt;\n 1 Buenos Aires    FIT                        352790\n 2 Buenos Aires    HNP                        367457\n 3 Buenos Aires    JXC                       2374023\n 4 Buenos Aires    LLA                       2533633\n 5 Buenos Aires    NEG                        346808\n 6 Buenos Aires    UXP                       4224688\n 7 Catamarca       FIT                          3666\n 8 Catamarca       HNP                         14967\n 9 Catamarca       JXC                         39960\n10 Catamarca       LLA                         74570\n# ℹ 134 more rows\n\n\n\ndata_wider &lt;- data_agrupada %&gt;% \n  pivot_wider(names_from=votos_agrupado_red, values_from=votos_cantidad)\n\ndata_wider\n\n# A tibble: 24 × 7\n# Groups:   distrito_nombre [24]\n   distrito_nombre                    FIT    HNP     JXC     LLA    NEG     UXP\n   &lt;chr&gt;                            &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n 1 Buenos Aires                    352790 367457 2374023 2533633 346808 4224688\n 2 Catamarca                         3666  14967   39960   74570  15211   99612\n 3 Chaco                             5482  25804  171756  197596  12966  310962\n 4 Chubut                           15122  26555   70717  120297  10314  110820\n 5 Ciudad Autónoma de Buenos Aires  66145  57607  767367  369424  50056  600832\n 6 Corrientes                        7315  19118  224519  187916  15535  260040\n 7 Córdoba                          31895 665717  519252  769847  37521  308016\n 8 Entre Ríos                       12760  44720  250512  247640  47171  276850\n 9 Formosa                           2772   8793   55097  103911   6953  187229\n10 Jujuy                            16006  30775   90095  168921  11193  146027\n# ℹ 14 more rows\n\n\nY si quisiéramos volver al formato anterior.\n\ndata_longer &lt;- data_wider %&gt;% \n  pivot_longer(!distrito_nombre)\n\ndata_longer\n\n# A tibble: 144 × 3\n# Groups:   distrito_nombre [24]\n   distrito_nombre name    value\n   &lt;chr&gt;           &lt;chr&gt;   &lt;dbl&gt;\n 1 Buenos Aires    FIT    352790\n 2 Buenos Aires    HNP    367457\n 3 Buenos Aires    JXC   2374023\n 4 Buenos Aires    LLA   2533633\n 5 Buenos Aires    NEG    346808\n 6 Buenos Aires    UXP   4224688\n 7 Catamarca       FIT      3666\n 8 Catamarca       HNP     14967\n 9 Catamarca       JXC     39960\n10 Catamarca       LLA     74570\n# ℹ 134 more rows\n\n\nFinalmente, veamos el voto negativo (blanco y otros) por provincia.\n\ndata_wider %&gt;% \n  mutate(TOTAL = rowSums(across()), \n         NEG_per = NEG / TOTAL,\n         label = round(NEG_per*100,1)) %&gt;% \n  ggplot(aes(y=reorder(distrito_nombre, NEG_per), x=NEG_per, fill=NEG_per, label=label)) +\n  geom_col(show.legend = FALSE) +\n  geom_text(aes(x=NEG_per + 0.003), size=3)+\n  labs(x=\"\", y=\"\", \n       title=\"Votos negativos (%) por provincia\", \n       subtitle=\"Elecciones generales 2023\",\n       caption=\"Elaboración propia según resultados provisorios (DINE)\")+\n  theme_minimal()+\n  theme(axis.text.x=element_blank())\n\n\n\n\n\n\n\n\n\n\n\nGraficar:\n\nEl voto negativo en las secciones de Santa Cruz u otra provincia de preferencia.\nEl voto negativo a en regiones (NEA, NOA, CUYO, PAMPEANA, PATAGONIA).\nEl voto de LLA por provincia en absolutos.\nEl voto de UXP por provincia en porcentaje sobre votos afirmativos (sin contar los negativos)."
  },
  {
    "objectID": "procesamiento.html#pregunta-problema",
    "href": "procesamiento.html#pregunta-problema",
    "title": "2. Procesamiento",
    "section": "",
    "text": "Se mantendrá la tradición: definiremos una guía analítica para que las operaciones que hagamos tengan un sentido claro y sea más sencillo entender cuál es la información relevante.\nEn este caso nos vamos a seguir preguntando por el voto en blanco en las elecciones argentinas. ¿Qué particularidades presenta en las distintas provincias?"
  },
  {
    "objectID": "procesamiento.html#fuentes-de-datos",
    "href": "procesamiento.html#fuentes-de-datos",
    "title": "2. Procesamiento",
    "section": "",
    "text": "Los datos electorales son una fuente compleja de abordar por el volumen de información que conlleva. El dataset completo está disponible en https://www.argentina.gob.ar/dine/resultados-electorales/elecciones-2023 y vamos a estar utilizando el de las elecciones generales de 2023. No olviden descomprimir el archivo luego de descargarlo. Lo interesante de tomar este tipo de datos es el nivel de desagregación: tenemos resultados por mesa. En los comicios locales, cada mesa pertenece a un circuito, cada circuito pertenence a una sección y cada sección pertenece a un distrito. Por poner un ejemplo: tenemos la mesa 12 en el circuito 12A pertenenciente a la sección Comuna 12 del distrito Capital Federal. Salvo las mesas, todos los niveles de agregación tienen un código y un nombre. Por ejemplo, la Provincia de Buenos Aires es el distrito n° 2 y Luján es la sección n° 71.\nVamos primero a cargar la librería de Tidyverse. En general, la carga de todas las librerías necesarias se realiza al principio del script, por una cuestión de estructura general (sirve para saber si tenemos instaladas todas las necesarias, qué tipo de funciones vamos a utilizar, etc.).\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "procesamiento.html#objetos-y-operadores",
    "href": "procesamiento.html#objetos-y-operadores",
    "title": "2. Procesamiento",
    "section": "",
    "text": "En la programación hay distintas lógicas de construcción de lenguajes. R se inscribe dentro de la programación orientada a objetos, es decir, cada elemento es tratado como un objeto. No vamos a profundizar, pero nos va a servir saber que una de las características esenciales de los objetos es que pertenencen a una clase. ¿Qué implica? La clase del objeto va a determinar un conjunto de propiedades y operaciones que podemos aplicar en dicho objeto. Los tipos o clases de objetos que vamos a estar utilizando son:\nSimples\n\ncharacter: texto.\nnumeric: números.\nlogical o bool: puede ser verdadero (TRUE) o falso (FALSE).\n\nCompuestos\n\nvector: lista de elementos del mismo tipo; unidimensional.\ndataframe: lo que usualmente llamamos tablas. Tienen filas y columnas.\n\nHay ciertas palabras y caracteres en los lenguajes de programación que están reservados para funciones específicas; en general cambian de color en Rstudio. Esas palabras reservadas no se pueden usar para nombrar objetos nuevos, por ejemplo.\n\n# veamos las diferencias entre escribir la misma palabra de distintas formas\nclass(FALSE)\n\n[1] \"logical\"\n\n#class(False)\nclass(\"False\")\n\n[1] \"character\"\n\n\nUn repaso rápido por los operadores más comunes nos muestra los siguientes.\n\n# operadores aritméticos\n10 + 10 # suma\n\n[1] 20\n\n10 - 10 # resta\n\n[1] 0\n\n10 * 2 # multiplicación\n\n[1] 20\n\n10 / 2 # división\n\n[1] 5\n\n10**2 # elevación\n\n[1] 100\n\n# operadores de relación\n2 &gt; 10 # menor\n\n[1] FALSE\n\n10 &gt; 10 # mayor\n\n[1] FALSE\n\n10 &gt;= 10 # mayor\n\n[1] TRUE\n\n\"karl\" == \"marx\" # es igual\n\n[1] FALSE\n\n\"karl\" != \"marx\" # es distinto\n\n[1] TRUE\n\n\"marx\" %in% c(\"marx\", \"durkheim\", \"weber\") # está presente en \n\n[1] TRUE\n\n# operadores lógicos\nTRUE & FALSE # operador lógico \"Y\"\n\n[1] FALSE\n\nTRUE | FALSE # operador lógico \"O\"\n\n[1] TRUE\n\n# de asignación\na = 2 #asignamos lo que está a la derecha a lo que está a la izquierda del operador\na\n\n[1] 2\n\nb &lt;- 3 # idem\nb\n\n[1] 3\n\n\nCarguemos nuestra base de datos para arrancar."
  },
  {
    "objectID": "analisis.html",
    "href": "analisis.html",
    "title": "3. Análisis",
    "section": "",
    "text": "La idea de este apartado es repasar algunas herramientas de estadística descriptiva para realizar análisis de datos. Se utilizará de insumo la Encuesta Nacional de Hogares (EAH) de la Ciudad de Buenos Aires.\n\nlibrary(tidyverse)\n\nLa EAH es una encuesta anual por muestreo que se propone recabar datos para conocer y analizar la situación socioeconómica y demográfica de la población y de los hogares de la Ciudad. Si bien lo correcto sería tomar y utilizar el factor de expansión, prescindiremos para facilitar el trabajo sobre la base.\n\nruta &lt;- \"data/encuentro_3/EAH_2023_ind.csv\"\n\ncolumnas &lt;- c(\"Número de vivienda\",\"Número de hogar\",\"Número de miembro\",\"Comuna\",\"Monto del ingreso per cápita familiar (mes pasado; incluye valores imputados. Se considera sólo miembros que no son servicio doméstico)\")\neah &lt;- read_csv(ruta, # seleccionamos archivo \n                  col_select=columnas) # elegimos qué columnas cargar\n\ncol_nuevas &lt;- c(\"num_vivienda\",\"num_hogar\",\"num_individuo\",\"comuna\",\"ingreso_per_capita_familiar\")\nnames(eah) = col_nuevas # renombramos \n\neah &lt;- eah %&gt;% filter(ingreso_per_capita_familiar &gt; 0) # eliminamos casos sin ingresos\n\ndim(eah)\n\n[1] 13000     5\n\nhead(eah)\n\n# A tibble: 6 × 5\n  num_vivienda num_hogar num_individuo comuna ingreso_per_capita_familiar\n         &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;                       &lt;dbl&gt;\n1            1         1             1      2                      140040\n2            1         2             1      2                      140000\n3            1         3             1      2                       70000\n4            1         4             1      2                       70000\n5            2         1             1     11                      215000\n6            2         1             2     11                      215000\n\n\n\n\n¿Cómo varía el ingreso en la Ciudad de Buenos Aires por comuna? ¿Cómo se relaciona eso con los resultados electorales de G2023?\n\n\n\n¿Por qué hablamos de muestra? se llama muestra a un subconjunto de una población que es captado para analizar a una población específica. Con población nos referimos al conjunto de todos los elementos que forman parte de un universo de interés.\nExisten distintas medidas resumen para sintetizar y describir las características principales de un conjunto de datos. Permiten obtener una visión general y son fundamentales para el análisis exploratorio.\nEn este apartado vamos a trabajar con la distribución del ingreso familiar per cápita en CABA. Una distribución es simplemente un conjunto de datos determinado; en este caso, una muestra proveniente de la encuesta antedicha.\n\n# al ser más de 13 mil casos, es imposible verlos en formato texto\neah$ingreso_per_capita_familiar[1:10]\n\n [1] 140040 140000  70000  70000 215000 215000  70000 268333 268333 268333\n\n\nPara visualizar una gran cantidad de datos podemos usar un tipo de gráfico llamado histograma. Veremos más sobre esto en el siguiente apartado. El eje X representa los valores presentes en la distribución y el eje Y representa la cantidad de apariciones de cada uno de esos valores.\n\neah %&gt;% \n  filter(ingreso_per_capita_familiar &lt; 2000000) %&gt;% # filtramos algunos casos para mejorar la visualización\n  ggplot(aes(ingreso_per_capita_familiar))+\n  geom_histogram()+\n  theme_minimal()+\n  labs(title=\"Distribución del ingreso per cápita familiar\", subtitle=\"Ciudad de Buenos Aires\")\n\n\n\n\n\n\n\n\nEl primer conjunto de medidas resumen que veremos son las medidas de tendencia central.\n\nMedia: más conocida como promedio. Es la suma de todos los valores dividida la cantidad de valores. Su sensibilidad a los valores atípicos la vuelve poco representativa en ciertas distribuciones.\n\n\n\n\nFórmula media\n\n\n\nMediana: se obtiene ordenando todos los valores de menor a mayor y tomando el valor que se encuentra justo en la mitad. Evita la sensibilidad a valores atípicos.\nModa: es la observación con mayor frecuencia en la distribución. Puede existir más de una.\n\n\n# guardamos los valores\nmedia &lt;- mean(eah$ingreso_per_capita_familiar)\nmediana &lt;- median(eah$ingreso_per_capita_familiar)\n\n# veamos la media\neah %&gt;% \n  filter(ingreso_per_capita_familiar &lt; 2000000) %&gt;% # filtramos algunos casos para mejorar la visualización\n  ggplot()+\n  geom_histogram(aes(ingreso_per_capita_familiar))+\n  geom_vline(xintercept= media, color=\"blue\", size=1)+\n  geom_text(aes(x=media+1e5, y=2900, label=\"Media\"), color=\"blue\")+\n  theme_minimal()+\n  labs(title=\"Distribución del ingreso per cápita familiar en CABA\", subtitle=paste0(\"Media: \",round(media,1)))\n\n\n\n\n\n\n\n# veamos la mediana\neah %&gt;% \n  filter(ingreso_per_capita_familiar &lt; 2000000) %&gt;% # filtramos algunos casos para mejorar la visualización\n  ggplot()+\n  geom_histogram(aes(ingreso_per_capita_familiar))+\n  geom_vline(xintercept= media, color=\"blue\", size=1, alpha=.5)+\n  geom_vline(xintercept= mediana, color=\"red\", size=1)+\n  geom_text(aes(x=media+1e5, y=2900, label=\"Media\"), color=\"blue\")+\n  geom_text(aes(x=media+4e4, y=2700, label=\"Mediana\"), color=\"red\")+\n  theme_minimal()+\n  labs(title=\"Distribución del ingreso per cápita familiar en CABA\", subtitle=paste0(\"Mediana: \",round(mediana,1)))\n\n\n\n\n\n\n\n\nEl segundo conjunto de medidas resumen que veremos son las medidas de variabilidad.\n\nVarianza: es la media de las desviaciones cuadráticas respecto de la media. Se elevan al cuadrado para evitar la compensación entre números positivos y negativos.\n\n\n\n\nFórmula varianza\n\n\n\nDesvío estándar: es la raíz cuadrada de la varianza; se utiliza para hacer interpretable la métrica.\n\n\n# guardamos los valores\nsd &lt;- sd(eah$ingreso_per_capita_familiar)\n\n# veamos la media\neah %&gt;% \n  filter(ingreso_per_capita_familiar &lt; 2000000) %&gt;% # filtramos algunos casos para mejorar la visualización\n  ggplot()+\n  geom_histogram(aes(ingreso_per_capita_familiar))+\n  geom_vline(xintercept= media, color=\"blue\", size=1)+\n  geom_vline(xintercept= media-sd, color=\"violet\", size=1, linetype = \"dashed\")+\n  geom_vline(xintercept= media+sd, color=\"violet\", size=1, linetype = \"dashed\")+\n  geom_text(aes(x=media+1e5, y=2900, label=\"Media\"), color=\"blue\")+\n  geom_text(aes(x=media+sd+3e5, y=2700, label=\"Media + desvío estándar\"), color=\"violet\")+\n  theme_minimal()+\n  labs(title=\"Distribución del ingreso per cápita familiar\", subtitle=paste0(\"Ciudad de Buenos Aires\"))\n\n\n\n\n\n\n\n\nEl tercer conjunto de medidas resumen que veremos son las medidas de posición. En general trabajamos con cuantiles, valores que dividen la distribución en una cantidad arbitraria de partes iguales. Se suelen usar los quintiles, que vimos en el primer encuentro con la función summary().\n\nsummary(eah$ingreso_per_capita_familiar)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    643  100000  177500  242067  300000 8134000 \n\n\nUna forma típica de ver una distribución según sus quintiles es el gráfico de cajas o bigotes (boxplot en inglés). Si un histograma sirve para ver una distribución en particular, los boxplots van a servirnos para comparar distintas distribuciones.\n\neah %&gt;% \n  filter(ingreso_per_capita_familiar &lt; 2000000) %&gt;% # filtramos algunos casos para mejorar la visualización\n  mutate(comuna = factor(comuna)) %&gt;% \n  ggplot(aes(x=comuna, y=ingreso_per_capita_familiar, fill=comuna))+\n  geom_boxplot(show.legend=FALSE)+\n  stat_summary(fun.y=mean, geom=\"point\", shape=4, size=2, color=\"white\", fill=\"white\") +\n  theme_minimal()+\n  labs(title=\"Distribución del ingreso per cápita familiar\", subtitle=paste0(\"Ciudad de Buenos Aires\"))\n\n\n\n\n\n\n\n\n\n\n\nLa función group_by() nos permite hacer ciertos cálculos por grupos. Lógicamente, el esquema es el siguiente.\n\n\n\nEsquema group_by\n\n\nEn este caso, veremos de sacar algunas medidas resumen por comuna.\n\neah_comuna &lt;- eah %&gt;% \n  group_by(comuna) %&gt;% \n  summarise(promedio_ipcf = mean(ingreso_per_capita_familiar),\n            mediana_ipcf = median(ingreso_per_capita_familiar),\n            sd_ipcf = sd(ingreso_per_capita_familiar)) %&gt;% \n  ungroup()\n\n\neah_comuna %&gt;% \n  mutate(comuna = paste0(\"Comuna \",comuna)) %&gt;% \n  ggplot(aes(y=reorder(comuna, promedio_ipcf), x=promedio_ipcf)) +\n  geom_segment(aes(xend=0)) +\n  geom_point(color=\"blue\", size=3) +\n  geom_point(aes(x=mediana_ipcf), color=\"red\", size=2) +\n  labs(x=\"\", y=\"\", \n       title=\"Promedio de ingresos por comuna\", \n       subtitle=\"Ciudad de Buenos Aires\",\n       caption=\"Elaboración propia según EAH\")+\n  theme_minimal()\n\n\n\n\n\n\n\n\nArmemos los resultados electorales para poder comparar resultados electorales con ingresos.\n\nruta &lt;- \"data/encuentro_2/2023_Generales/ResultadosElectorales_2023.csv\"\n\nf &lt;- function(x, pos){\n  filter(x,(cargo_nombre == \"PRESIDENTE Y VICE\")&(distrito_nombre ==\"Ciudad Autónoma de Buenos Aires\"))\n}\ng2023 &lt;- read_csv_chunked(ruta, DataFrameCallback$new(f), chunk_size=10000) %&gt;% \n  mutate(votos_agrupado = case_when(is.na(agrupacion_nombre) ~ \"NEGATIVO\", # transformamos variables\n                                       .default = as.character(agrupacion_nombre)), \n         votos_agrupado_red = case_when(votos_agrupado == \"NEGATIVO\" ~ \"NEG\",\n                                        votos_agrupado == \"UNION POR LA PATRIA\" ~ \"UXP\",\n                                        votos_agrupado == \"JUNTOS POR EL CAMBIO\" ~ \"JXC\",\n                                        votos_agrupado == \"LA LIBERTAD AVANZA\" ~ \"LLA\",\n                                        votos_agrupado == \"FRENTE DE IZQUIERDA Y DE TRABAJADORES - UNIDAD\" ~ \"FIT\",\n                                        votos_agrupado == \"HACEMOS POR NUESTRO PAIS\" ~ \"HNP\")) %&gt;% \n  group_by(seccion_id, votos_agrupado_red) %&gt;% # agrupamos\n  summarise(votos = sum(votos_cantidad)) %&gt;% \n  ungroup() %&gt;% \n  pivot_wider(names_from=votos_agrupado_red, values_from=votos) %&gt;% # pasamos a wider\n  mutate(TOTAL = rowSums(across()), # calculamos %\n         NEG_per = NEG / TOTAL,\n         UXP_per = UXP / TOTAL,\n         JXC_per = JXC / TOTAL,\n         LLA_per = LLA / TOTAL,\n         FIT_per = FIT / TOTAL,\n         HNP_per = HNP / TOTAL, \n         comuna = seccion_id)\n\ndim(g2023) # vemos cuántas filas y columnas tiene\n\n[1] 15 15\n\nhead(g2023) # vemos las primeras 5 filas\n\n# A tibble: 6 × 15\n  seccion_id   FIT   HNP   JXC   LLA   NEG   UXP  TOTAL NEG_per UXP_per JXC_per\n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1          1  3981  3230 45975 25657  3762 38645 121251  0.0310   0.319   0.379\n2          2  1912  2250 57022 17875  1951 19225 100237  0.0195   0.192   0.569\n3          3  4571  3362 39075 23562  2902 38993 112468  0.0258   0.347   0.347\n4          4  5586  4211 39963 29077  4283 51401 134525  0.0318   0.382   0.297\n5          5  4814  3675 43259 20595  2815 42504 117667  0.0239   0.361   0.368\n6          6  4208  3698 54873 20043  2649 39230 124707  0.0212   0.315   0.440\n# ℹ 4 more variables: LLA_per &lt;dbl&gt;, FIT_per &lt;dbl&gt;, HNP_per &lt;dbl&gt;, comuna &lt;dbl&gt;\n\n\n\n\n\nPara cruzar distintas bases de datos podemos usar las funciones _join() disponibles en Tidyverse. Una buena práctica es chequear que las claves funcionen correctamente antes de realizar la unión.\n\n\n\nUniones\n\n\n\neah %&gt;% \n  select(comuna) %&gt;% \n  distinct() %&gt;% \n  arrange(comuna)\n\n# A tibble: 15 × 1\n   comuna\n    &lt;dbl&gt;\n 1      1\n 2      2\n 3      3\n 4      4\n 5      5\n 6      6\n 7      7\n 8      8\n 9      9\n10     10\n11     11\n12     12\n13     13\n14     14\n15     15\n\ng2023 %&gt;% \n  select(comuna) %&gt;% \n  distinct() %&gt;% \n  arrange(comuna)\n\n# A tibble: 15 × 1\n   comuna\n    &lt;dbl&gt;\n 1      1\n 2      2\n 3      3\n 4      4\n 5      5\n 6      6\n 7      7\n 8      8\n 9      9\n10     10\n11     11\n12     12\n13     13\n14     14\n15     15\n\n\nUnimos.\n\nunion &lt;- left_join(eah_comuna, g2023)\nunion\n\n# A tibble: 15 × 18\n   comuna promedio_ipcf mediana_ipcf sd_ipcf seccion_id   FIT   HNP   JXC   LLA\n    &lt;dbl&gt;         &lt;dbl&gt;        &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1      1       202054.       133333 407191.          1  3981  3230 45975 25657\n 2      2       352813.       288750 274452.          2  1912  2250 57022 17875\n 3      3       239054.       175000 217593.          3  4571  3362 39075 23562\n 4      4       187481.       142667 174572.          4  5586  4211 39963 29077\n 5      5       272783.       203745 249796.          5  4814  3675 43259 20595\n 6      6       318939.       265000 231980.          6  4208  3698 54873 20043\n 7      7       195993.       147000 166927.          7  4863  4193 48420 28137\n 8      8       117076.        90000  95754.          8  4285  3238 26068 27845\n 9      9       178027.       143333 125424.          9  4578  4047 37413 25544\n10     10       225012.       180000 159391.         10  4719  4164 41986 23062\n11     11       264226.       215000 198084.         11  5061  4588 54758 25858\n12     12       314651.       240000 237795.         12  5307  5013 64831 27422\n13     13       347865.       275000 297813.         13  3887  4321 87321 27643\n14     14       415010.       300000 474295.         14  3613  3621 80939 25920\n15     15       238035.       191000 193145.         15  4760  3996 45464 21184\n# ℹ 9 more variables: NEG &lt;dbl&gt;, UXP &lt;dbl&gt;, TOTAL &lt;dbl&gt;, NEG_per &lt;dbl&gt;,\n#   UXP_per &lt;dbl&gt;, JXC_per &lt;dbl&gt;, LLA_per &lt;dbl&gt;, FIT_per &lt;dbl&gt;, HNP_per &lt;dbl&gt;\n\n\nVeamoslo gráficamente.\n\nunion %&gt;% \n  select(comuna, mediana_ipcf, NEG_per, FIT_per, HNP_per, JXC_per, LLA_per, UXP_per) %&gt;% \n  pivot_longer(!c(\"comuna\", \"mediana_ipcf\")) %&gt;% \n  mutate(name = str_replace(name, \"_per\",\"\")) %&gt;% \n  ggplot(aes(x=mediana_ipcf, y=value, color=name))+\n  geom_point()+\n  facet_wrap(~name, scales=\"free\")+\n    labs(title=\"Ingresos x voto (%)\", \n       subtitle=\"Ciudad de Buenos Aires\",\n       y=\"Voto (%)\")+\n  scale_color_manual(values=c(\"red\", \"seagreen\", \"orange\", \"darkviolet\", \"black\", \"dodgerblue\"))+\n  theme_minimal()+\n  theme(axis.text.x=element_blank(),\n        axis.text.y=element_blank(),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\nSe puede probar:\n\nunir la base con alguna otra información por comuna presente en la página de datos del GCBA. Analizar la relación con alguna de las variables presentes en esta base.\ngraficar el voto negativo vs votos contra otros partidos. ¿Hay alguna relación interesante?"
  },
  {
    "objectID": "procesamiento.html#procesar-resultados-electorales",
    "href": "procesamiento.html#procesar-resultados-electorales",
    "title": "2. Procesamiento",
    "section": "",
    "text": "Carguemos sólo 6000 filas, sabiendo que es un dataset muy grande y que quizás se demore mucho cargar toda la base de primera. Veamos una parte para entender la estructura.\n\nruta &lt;- \"data/encuentro_2/2023_Generales/ResultadosElectorales_2023.csv\"\ndata &lt;- read_csv(ruta, n_max=6000) # cargamos sólo 6000 filas\ndata\n\n# A tibble: 6,000 × 23\n     año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre    \n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;              \n 1  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 2  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 3  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 4  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 5  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 6  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 7  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 8  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 9  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n10  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n# ℹ 5,990 more rows\n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;\n\n\nLa mayor particularidad de los resultados electorales es tener formato long (largo). En el formato long, cada fila de la tabla representa una observación única para una combinación específica de variables. Es útil para trabajar con datos que necesitan ser agrupados o resumidos fácilmente. Cada variable está dividida en dos columnas: una para el nombre de la variable y otra para su valor. El formato alternativo es wide, donde cada fila representa una observación única y cada columna representa una variable diferente. Es útil cuando se necesita acceder rápidamente a las variables individuales sin necesidad de realizar transformaciones adicionales.\n\n\n\nformatos de tabla\n\n\nEn la base hay un gran número de columnas, que podemos explorar con la función names(). También hay elecciones a distintos cargos, como legislativos.\n\nnames(data)\n\n [1] \"año\"                      \"eleccion_tipo\"           \n [3] \"recuento_tipo\"            \"padron_tipo\"             \n [5] \"distrito_id\"              \"distrito_nombre\"         \n [7] \"seccionprovincial_id\"     \"seccionprovincial_nombre\"\n [9] \"seccion_id\"               \"seccion_nombre\"          \n[11] \"circuito_id\"              \"circuito_nombre\"         \n[13] \"mesa_id\"                  \"mesa_tipo\"               \n[15] \"mesa_electores\"           \"cargo_id\"                \n[17] \"cargo_nombre\"             \"agrupacion_id\"           \n[19] \"agrupacion_nombre\"        \"lista_numero\"            \n[21] \"lista_nombre\"             \"votos_tipo\"              \n[23] \"votos_cantidad\"          \n\ntable(data$cargo_nombre)\n\n\nPRESIDENTE Y VICE  SENADOR NACIONAL \n             5844               156 \n\n\nVamos a cargar la base completa pero usando una función especial para ir filtrando los casos antes de cargar la base, para que nos pese menos el objeto y podamos manipularlo con comodidad.\n\nf &lt;- function(x, pos){\n  filter(x,(cargo_nombre == \"PRESIDENTE Y VICE\"))\n}\ndata &lt;- read_csv_chunked(ruta, DataFrameCallback$new(f), chunk_size=10000)\ndim(data) # vemos cuántas filas y columnas tiene\n\n[1] 1045200      23\n\nhead(data) # vemos las primeras 5 filas\n\n# A tibble: 6 × 23\n    año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre     \n  &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;               \n1  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de …\n2  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de …\n3  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de …\n4  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de …\n5  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de …\n6  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de …\n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;"
  },
  {
    "objectID": "procesamiento.html#exploración-y-recorte",
    "href": "procesamiento.html#exploración-y-recorte",
    "title": "2. Procesamiento",
    "section": "",
    "text": "Probablemente en la mayoría de los casos una base de datos venga con más información de la necesaria. Una de nuestras primeras tareas en el procesamiento de una base de datos va a ser recortar para quedarnos sólo con las filas y columnas que nos sirven. Tomar esas definiciones va a requerir un primer paneo general de la información que contiene la base de datos.\nExisten funciones que nos van a resumir, a grandes rasgos, la totalidad de la base.\n\nglimpse(data) # ¡hay otras de este tipo en el primer encuentro!\n\nRows: 1,045,200\nColumns: 23\n$ año                      &lt;dbl&gt; 2023, 2023, 2023, 2023, 2023, 2023, 2023, 202…\n$ eleccion_tipo            &lt;chr&gt; \"GENERAL\", \"GENERAL\", \"GENERAL\", \"GENERAL\", \"…\n$ recuento_tipo            &lt;chr&gt; \"PROVISORIO\", \"PROVISORIO\", \"PROVISORIO\", \"PR…\n$ padron_tipo              &lt;chr&gt; \"NORMAL\", \"NORMAL\", \"NORMAL\", \"NORMAL\", \"NORM…\n$ distrito_id              &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ distrito_nombre          &lt;chr&gt; \"Ciudad Autónoma de Buenos Aires\", \"Ciudad Au…\n$ seccionprovincial_id     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ seccionprovincial_nombre &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ seccion_id               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ seccion_nombre           &lt;chr&gt; \"Comuna 01\", \"Comuna 01\", \"Comuna 01\", \"Comun…\n$ circuito_id              &lt;chr&gt; \"00018\", \"00018\", \"00018\", \"00018\", \"00018\", …\n$ circuito_nombre          &lt;chr&gt; \"00018\", \"00018\", \"00018\", \"00018\", \"00018\", …\n$ mesa_id                  &lt;dbl&gt; 474, 474, 474, 474, 475, 475, 475, 475, 475, …\n$ mesa_tipo                &lt;chr&gt; \"NATIVOS\", \"NATIVOS\", \"NATIVOS\", \"NATIVOS\", \"…\n$ mesa_electores           &lt;dbl&gt; 343, 343, 343, 343, 349, 349, 349, 349, 349, …\n$ cargo_id                 &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ cargo_nombre             &lt;chr&gt; \"PRESIDENTE Y VICE\", \"PRESIDENTE Y VICE\", \"PR…\n$ agrupacion_id            &lt;dbl&gt; 0, 0, 0, 0, 134, 132, 135, 136, 133, 0, 0, 0,…\n$ agrupacion_nombre        &lt;chr&gt; NA, NA, NA, NA, \"UNION POR LA PATRIA\", \"JUNTO…\n$ lista_numero             &lt;dbl&gt; 0, 0, 0, 0, NA, NA, NA, NA, NA, 0, 0, 0, 0, 0…\n$ lista_nombre             &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ votos_tipo               &lt;chr&gt; \"NULO\", \"IMPUGNADO\", \"RECURRIDO\", \"COMANDO\", …\n$ votos_cantidad           &lt;dbl&gt; 0, 0, 0, 0, 95, 59, 57, 9, 4, 4, 3, 0, 0, 0, …\n\n\nQuizás queremos ver algunas filas completas.\n\nhead(data, 10) # un top N de filas\n\n# A tibble: 10 × 23\n     año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre    \n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;              \n 1  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 2  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 3  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 4  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 5  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 6  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 7  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 8  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 9  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n10  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;\n\ntail(data, 10) # las últimas N filas \n\n# A tibble: 10 × 23\n     año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre    \n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;              \n 1  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n 2  2023 GENERAL       PROVISORIO    NORMAL               17 Salta              \n 3  2023 GENERAL       PROVISORIO    NORMAL               23 Tucumán            \n 4  2023 GENERAL       PROVISORIO    NORMAL               10 Jujuy              \n 5  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n 6  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n 7  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n 8  2023 GENERAL       PROVISORIO    NORMAL               22 Santiago del Estero\n 9  2023 GENERAL       PROVISORIO    NORMAL               14 Misiones           \n10  2023 GENERAL       PROVISORIO    NORMAL               18 San Juan           \n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;\n\nsample_n(data, 10) # 10 filas al azar\n\n# A tibble: 10 × 23\n     año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre    \n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;              \n 1  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n 2  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n 3  2023 GENERAL       PROVISORIO    NORMAL               10 Jujuy              \n 4  2023 GENERAL       PROVISORIO    NORMAL               15 Neuquén            \n 5  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n 6  2023 GENERAL       PROVISORIO    NORMAL               17 Salta              \n 7  2023 GENERAL       PROVISORIO    NORMAL                4 Córdoba            \n 8  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n 9  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires       \n10  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;\n\n\nQuizás queremos contar apariciones de algunos valores.\n\ndata$votos_tipo %&gt;% # contamos apariciones de tipo de votos hay, en absolutos \n  table() \n\n.\n  COMANDO EN BLANCO IMPUGNADO      NULO  POSITIVO RECURRIDO \n   104520    104520    104520    104520    522600    104520 \n\ndata$distrito_nombre %&gt;% # contamos % de apariciones de distritos\n  table() %&gt;%\n  prop.table() %&gt;% \n  round(digits=4)*100\n\n.\n                                         Buenos Aires \n                                                36.43 \n                                            Catamarca \n                                                 1.01 \n                                                Chaco \n                                                 2.82 \n                                               Chubut \n                                                 1.35 \n                      Ciudad Autónoma de Buenos Aires \n                                                 7.01 \n                                              Córdoba \n                                                 8.70 \n                                           Corrientes \n                                                 2.64 \n                                           Entre Ríos \n                                                 3.28 \n                                              Formosa \n                                                 1.42 \n                                                Jujuy \n                                                 1.75 \n                                             La Pampa \n                                                 0.86 \n                                             La Rioja \n                                                 0.91 \n                                              Mendoza \n                                                 4.17 \n                                             Misiones \n                                                 2.75 \n                                              Neuquén \n                                                 1.60 \n                                            Río Negro \n                                                 1.71 \n                                                Salta \n                                                 3.15 \n                                             San Juan \n                                                 1.73 \n                                             San Luis \n                                                 1.25 \n                                           Santa Cruz \n                                                 0.87 \n                                             Santa Fe \n                                                 7.97 \n                                  Santiago del Estero \n                                                 2.36 \nTierra del Fuego, Antártida e Islas del Atlántico Sur \n                                                 0.49 \n                                              Tucumán \n                                                 3.75 \n\n\nQuizás queremos saber, de manera más general, cuántos valores únicos tiene cada una de las columnas.\n\nsapply(data, n_distinct) # sapply sirve para aplicar una función a todas las columnas\n\n                     año            eleccion_tipo            recuento_tipo \n                       1                        1                        1 \n             padron_tipo              distrito_id          distrito_nombre \n                       1                       24                       24 \n    seccionprovincial_id seccionprovincial_nombre               seccion_id \n                       9                       12                      135 \n          seccion_nombre              circuito_id          circuito_nombre \n                     446                     2335                     2335 \n                 mesa_id                mesa_tipo           mesa_electores \n                    9097                        1                      378 \n                cargo_id             cargo_nombre            agrupacion_id \n                       1                        1                        6 \n       agrupacion_nombre             lista_numero             lista_nombre \n                       6                        2                        1 \n              votos_tipo           votos_cantidad \n                       6                      264 \n\n\nPuntos interesantes hasta este punto: hay más de un millón de filas; cada una representa un tipo de voto en una mesa en particular; cada nivel de geográfico (distrito, sección, circuito), el cargo y la agrupación tiene id y nombre; al menos 8 columnas tienen un sólo valor, por lo que no nos sirven para esta base de datos.\nPara seleccionar filas y columnas vamos a utilizar las funciones filter() y select(), dos estrellas de Tidyverse.\n\n# filter recibe un dataframe y una condición\ndata %&gt;% \n  filter(distrito_nombre == \"Buenos Aires\") # filtramos sólo los casos de Buenos Aires\n\n# A tibble: 380,740 × 23\n     año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre\n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;          \n 1  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 2  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 3  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 4  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 5  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 6  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 7  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 8  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 9  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n10  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n# ℹ 380,730 more rows\n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;\n\n# podríamos querer filtrar por más de una condición\ndata %&gt;% \n  filter(distrito_nombre == \"Buenos Aires\" & votos_cantidad &gt; 200) # ¿por qué haríamos eso? sólo para mostrar cómo funcionan las condiciones\n\n# A tibble: 54 × 23\n     año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre\n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;          \n 1  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 2  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 3  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 4  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 5  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 6  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 7  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 8  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n 9  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n10  2023 GENERAL       PROVISORIO    NORMAL                2 Buenos Aires   \n# ℹ 44 more rows\n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;\n\n# podemos jugar con otros operadores lógicos\ndata %&gt;% \n  filter(distrito_nombre==\"Buenos Aires\" | votos_tipo != \"POSITIVO\")\n\n# A tibble: 712,970 × 23\n     año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre    \n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;              \n 1  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 2  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 3  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 4  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 5  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 6  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 7  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 8  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 9  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n10  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n# ℹ 712,960 more rows\n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;\n\ndata %&gt;% \n  filter(distrito_nombre %in% c(\"Buenos Aires\",\"Ciudad Autónoma de Buenos Aires\"))\n\n# A tibble: 454,000 × 23\n     año eleccion_tipo recuento_tipo padron_tipo distrito_id distrito_nombre    \n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;              \n 1  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 2  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 3  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 4  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 5  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 6  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 7  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 8  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n 9  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n10  2023 GENERAL       PROVISORIO    NORMAL                1 Ciudad Autónoma de…\n# ℹ 453,990 more rows\n# ℹ 17 more variables: seccionprovincial_id &lt;dbl&gt;,\n#   seccionprovincial_nombre &lt;chr&gt;, seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;, votos_tipo &lt;chr&gt;, votos_cantidad &lt;dbl&gt;\n\n\nPara seleccionar, select() nos da una diversidad muy interesante e intuitiva de opciones.\n\n# podemos querer seleccionar una columna específica\ndata %&gt;% \n  select(distrito_id)\n\n# A tibble: 1,045,200 × 1\n   distrito_id\n         &lt;dbl&gt;\n 1           1\n 2           1\n 3           1\n 4           1\n 5           1\n 6           1\n 7           1\n 8           1\n 9           1\n10           1\n# ℹ 1,045,190 more rows\n\n# o varias columnas\ndata %&gt;% \n  select(distrito_id, distrito_nombre)\n\n# A tibble: 1,045,200 × 2\n   distrito_id distrito_nombre                \n         &lt;dbl&gt; &lt;chr&gt;                          \n 1           1 Ciudad Autónoma de Buenos Aires\n 2           1 Ciudad Autónoma de Buenos Aires\n 3           1 Ciudad Autónoma de Buenos Aires\n 4           1 Ciudad Autónoma de Buenos Aires\n 5           1 Ciudad Autónoma de Buenos Aires\n 6           1 Ciudad Autónoma de Buenos Aires\n 7           1 Ciudad Autónoma de Buenos Aires\n 8           1 Ciudad Autónoma de Buenos Aires\n 9           1 Ciudad Autónoma de Buenos Aires\n10           1 Ciudad Autónoma de Buenos Aires\n# ℹ 1,045,190 more rows\n\n# si lo pasamos como vector, hay que incluir las comillas\ndata %&gt;% \n  select(c(\"distrito_id\", \"distrito_nombre\"))\n\n# A tibble: 1,045,200 × 2\n   distrito_id distrito_nombre                \n         &lt;dbl&gt; &lt;chr&gt;                          \n 1           1 Ciudad Autónoma de Buenos Aires\n 2           1 Ciudad Autónoma de Buenos Aires\n 3           1 Ciudad Autónoma de Buenos Aires\n 4           1 Ciudad Autónoma de Buenos Aires\n 5           1 Ciudad Autónoma de Buenos Aires\n 6           1 Ciudad Autónoma de Buenos Aires\n 7           1 Ciudad Autónoma de Buenos Aires\n 8           1 Ciudad Autónoma de Buenos Aires\n 9           1 Ciudad Autónoma de Buenos Aires\n10           1 Ciudad Autónoma de Buenos Aires\n# ℹ 1,045,190 more rows\n\n# podemos querer filtrar un subconjunto continuo de columnas\ndata %&gt;% \n  select(distrito_id:lista_nombre)\n\n# A tibble: 1,045,200 × 17\n   distrito_id distrito_nombre       seccionprovincial_id seccionprovincial_no…¹\n         &lt;dbl&gt; &lt;chr&gt;                                &lt;dbl&gt; &lt;chr&gt;                 \n 1           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 2           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 3           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 4           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 5           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 6           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 7           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 8           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 9           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n10           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n# ℹ 1,045,190 more rows\n# ℹ abbreviated name: ¹​seccionprovincial_nombre\n# ℹ 13 more variables: seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;,\n#   circuito_id &lt;chr&gt;, circuito_nombre &lt;chr&gt;, mesa_id &lt;dbl&gt;, mesa_tipo &lt;chr&gt;,\n#   mesa_electores &lt;dbl&gt;, cargo_id &lt;dbl&gt;, cargo_nombre &lt;chr&gt;,\n#   agrupacion_id &lt;dbl&gt;, agrupacion_nombre &lt;chr&gt;, lista_numero &lt;dbl&gt;,\n#   lista_nombre &lt;lgl&gt;\n\n# o podemos querer negar una condición\ndata %&gt;% \n  select(!distrito_id:lista_nombre)\n\n# A tibble: 1,045,200 × 6\n     año eleccion_tipo recuento_tipo padron_tipo votos_tipo votos_cantidad\n   &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt;               &lt;dbl&gt;\n 1  2023 GENERAL       PROVISORIO    NORMAL      NULO                    0\n 2  2023 GENERAL       PROVISORIO    NORMAL      IMPUGNADO               0\n 3  2023 GENERAL       PROVISORIO    NORMAL      RECURRIDO               0\n 4  2023 GENERAL       PROVISORIO    NORMAL      COMANDO                 0\n 5  2023 GENERAL       PROVISORIO    NORMAL      POSITIVO               95\n 6  2023 GENERAL       PROVISORIO    NORMAL      POSITIVO               59\n 7  2023 GENERAL       PROVISORIO    NORMAL      POSITIVO               57\n 8  2023 GENERAL       PROVISORIO    NORMAL      POSITIVO                9\n 9  2023 GENERAL       PROVISORIO    NORMAL      POSITIVO                4\n10  2023 GENERAL       PROVISORIO    NORMAL      EN BLANCO               4\n# ℹ 1,045,190 more rows\n\n# podemos filtrar según el nombre de la columna\ndata %&gt;% \n  select(ends_with(\"nombre\"))\n\n# A tibble: 1,045,200 × 7\n   distrito_nombre         seccionprovincial_no…¹ seccion_nombre circuito_nombre\n   &lt;chr&gt;                   &lt;chr&gt;                  &lt;chr&gt;          &lt;chr&gt;          \n 1 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n 2 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n 3 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n 4 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n 5 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n 6 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n 7 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n 8 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n 9 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n10 Ciudad Autónoma de Bue… &lt;NA&gt;                   Comuna 01      00018          \n# ℹ 1,045,190 more rows\n# ℹ abbreviated name: ¹​seccionprovincial_nombre\n# ℹ 3 more variables: cargo_nombre &lt;chr&gt;, agrupacion_nombre &lt;chr&gt;,\n#   lista_nombre &lt;lgl&gt;\n\n# y agregar condiciones\ndata %&gt;% \n  select(starts_with(\"distrito\") | starts_with(\"seccion\"))\n\n# A tibble: 1,045,200 × 6\n   distrito_id distrito_nombre       seccionprovincial_id seccionprovincial_no…¹\n         &lt;dbl&gt; &lt;chr&gt;                                &lt;dbl&gt; &lt;chr&gt;                 \n 1           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 2           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 3           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 4           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 5           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 6           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 7           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 8           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n 9           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n10           1 Ciudad Autónoma de B…                    0 &lt;NA&gt;                  \n# ℹ 1,045,190 more rows\n# ℹ abbreviated name: ¹​seccionprovincial_nombre\n# ℹ 2 more variables: seccion_id &lt;dbl&gt;, seccion_nombre &lt;chr&gt;\n\n\nEn este caso, vamos a quedarnos con las columnas que tienen más de 1 valor único. No hará falta filtrar todavía.\n\ncols_sin_valores &lt;- data %&gt;% \n  sapply(n_distinct) %&gt;% \n  as.data.frame() %&gt;% \n  rename(n_distinct_values = 1) %&gt;% # asigno nombre \n  filter(n_distinct_values == 1) %&gt;% # filtro\n  rownames()\n\ncols_sin_valores\n\n[1] \"año\"           \"eleccion_tipo\" \"recuento_tipo\" \"padron_tipo\"  \n[5] \"mesa_tipo\"     \"cargo_id\"      \"cargo_nombre\"  \"lista_nombre\" \n\ndata &lt;- data %&gt;% \n  select(!cols_sin_valores) %&gt;% \n  select(!ends_with(\"id\")) %&gt;% \n  select(!c(\"lista_numero\")) %&gt;% \n  select(!(starts_with(\"seccion\") | starts_with(\"circuito\") | starts_with(\"mesa\")))"
  },
  {
    "objectID": "viz.html",
    "href": "viz.html",
    "title": "4. Visualización",
    "section": "",
    "text": "En este apartado nos enfocaremos en entender por qué visualizar datos y cómo construirlos utilizando ggplot().\n\n\nCaracterizar la territorialidad del voto en la Provincia de Buenos Aires.\n\nlibrary(tidyverse)\n\ndata &lt;- read_csv(\"data/encuentro_1/ARG_elecciones.csv\")\n\nhead(data,2)\n\n# A tibble: 2 × 10\n  id         seccion Elecciones Partido Porcentaje Votos Participacion electores\n  &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;     &lt;dbl&gt;\n1 BUENOS AI… Adolfo… BALLOTAGE… BLANCO        1.19   134          79.2     14171\n2 BUENOS AI… Albert… BALLOTAGE… BLANCO        1.6    123          84.2      9147\n# ℹ 2 more variables: votantes &lt;dbl&gt;, Provincia &lt;chr&gt;\n\n\n\n\n\n\n\n\n\n\n\nAtención\n\n\n\nLa visualización de datos es parte arte y parte ciencia y, como bien dice Claus Wilke, el desafío es realizar correctamente el arte sin desfigurar la ciencia (y viceversa).\n\n\nHay tres razones centrales por las que visualizamos la información:\n\nExplorar los datos: hay relaciones que podemos malinterpretar si sólo miramos métricas resumen.\nExpresar relaciones complejas: no siempre las tablas nos van a permitir ver con claridad cuando hay mucha información involucrada.\nComunicar: en general, construimos información para contársela a otras personas. Probablemente sea más fácil de contar una historia con un gráfico que con una tabla, por ejemplo.\n\n\nExplorar los datosExpresar relaciones complejasComunicar\n\n\nUn gran ejemplo para mostrar lo importante de visualizar los datos es el llamado Cuarteto de Anscombe.\n\n\n\nHans Rosling fundó el proyecto Gapminder y popularizó la siguiente visualización. Aquí está disponible con la explicación del autor.\n\n\n\n\n\n\n\n\nDos ejemplos de visualizaciones que tienen muy en claro qué es lo que quieren comunicar. Una disposición de la información que acompaña y refuerza el mensaje.\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\nFigure 1: Fuente: Chequeado\n\n\n\n\n\n\n\n\n\nHagamos una tabla con los votos al PJ en las distintas elecciones en la Provincia de Buenos Aires.\n\ncols_pj &lt;- c(\"FRENTE PARA LA VICTORIA\",\"UNION POR LA PATRIA\",\"FRENTE DE TODOS\")\norden &lt;- c(\"P2011\", \"G2011\",\n\"P2015\", \"G2015\",\"B2015\",\n\"P2019\", \"G2019\",\n\"P2023\", \"G2023\",\"B2023\")\n\ntab_pj &lt;- data %&gt;% \n  filter(Provincia==\"BUENOS AIRES\") %&gt;% \n  separate_wider_delim(Elecciones, \" \", names = c(\"tipo_eleccion\", \"anio_eleccion\"), cols_remove=FALSE) %&gt;% \n  group_by(Elecciones, tipo_eleccion, anio_eleccion, Partido) %&gt;% \n  summarise(votos = sum(Votos), \n            electores = sum(electores),\n            votantes = sum(votantes)) %&gt;% \n  mutate(votos_per = votos / votantes,\n         participacion = votantes / electores,\n         Elecciones = str_replace(Elecciones, \"PASO \",\"P\"),\n         Elecciones = str_replace(Elecciones, \"GENERALES \",\"G\"),\n         Elecciones = str_replace(Elecciones, \"BALLOTAGE \",\"B\"),\n         Elecciones = factor(Elecciones, orden)\n         ) %&gt;% \n  filter(Partido %in% cols_pj)\ntab_pj\n\n# A tibble: 10 × 9\n# Groups:   Elecciones, tipo_eleccion, anio_eleccion [10]\n   Elecciones tipo_eleccion anio_eleccion Partido       votos electores votantes\n   &lt;fct&gt;      &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 B2015      BALLOTAGE     2015          FRENTE PARA… 4.83e6  11756541  9700855\n 2 B2023      BALLOTAGE     2023          UNION POR L… 4.92e6  13133726 10017387\n 3 G2011      GENERALES     2011          FRENTE PARA… 4.70e6  10574461  8715437\n 4 G2015      GENERALES     2015          FRENTE PARA… 3.42e6  12033279  9494724\n 5 G2019      GENERALES     2019          FRENTE DE T… 5.03e6  11995955  9882295\n 6 G2023      GENERALES     2023          UNION POR L… 4.22e6  13124435 10199399\n 7 P2011      PASO          2011          FRENTE PARA… 4.22e6  10818764  8540638\n 8 P2015      PASO          2015          FRENTE PARA… 3.24e6  11866173  8686139\n 9 P2019      PASO          2019          FRENTE DE T… 4.66e6  12348284  9279760\n10 P2023      PASO          2023          UNION POR L… 2.83e6  13115144  8902113\n# ℹ 2 more variables: votos_per &lt;dbl&gt;, participacion &lt;dbl&gt;\n\n\nLa librería estrella de la visualización en Tidyverse funciona a través de capas. Cada una se corresponde con funciones diferentes dentro de la visualización.\n\nCon ggplot() simplemente vamos a establecer un lienzo vacío. En este caso, ya recibe la tabla con la información.\n\ntab_pj %&gt;% \n  ggplot()\n\n\n\n\n\n\n\n\nLuego definimos las asignaciones estéticas: la relación entre las variables y ciertos elementos de los gráficos (ejes/coordenadas o distintos atributos como color, tamaño, forma, etc.).\n\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=participacion))\n\n\n\n\n\n\n\n\nLa siguiente definición es de los elementos geométricos con los que vamos a representar los datos definidos con anterioridad.\n\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=participacion))+\n  geom_point()\n\n\n\n\n\n\n\n# intentamos con otro tipo de gráfico\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=participacion))+\n  geom_col()\n\n\n\n\n\n\n\n# intentamos con DOS gráficos\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=participacion))+\n  geom_col(width=0.1, fill=\"violet\")+\n  geom_point(color=\"violet\", size=7)\n\n\n\n\n\n\n\n# intentamos con TRES gráficos\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=participacion))+\n  geom_col(width=0.1, fill=\"violet\")+\n  geom_point(color=\"violet\", size=7)+\n  geom_line(aes(group=1),color=\"black\")\n\n\n\n\n\n\n\n\nSe pueden agregar otros atributos. Color se utiliza para líneas y puntos; fill se utiliza para las áreas de los gráficos.\n\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, color=Partido, shape=anio_eleccion))+\n  geom_point(size=3, stroke=3)\n\n\n\n\n\n\n\n# intentamos con otro tipo de gráfico\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, fill=Partido))+\n  geom_col()\n\n\n\n\n\n\n\n# si se define por fuera del aes() funciona como atributo general\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=votos_per))+\n  geom_col(fill=\"red\")\n\n\n\n\n\n\n\n\nEl siguiente elemento que podríamos incorporar tiene que ver con definir el tipo de paleta de colores a utilizar, los límites de los ejes u otras cuestiones que no afectan a lo esencial del gráfico pero ayudan a comunicar el punto.\n\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, fill=Partido))+\n  geom_col()+\n  ylim(0,1)+ # ponemos límites entre 0 y 100%\n  scale_fill_viridis_d() # viridis es una paleta de colores en particular\n\n\n\n\n\n\n\n\nCuando hablamos de facetado nos referimos a separar los gráficos en partes según alguna variable.\n\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, fill=Partido))+\n  geom_col()+\n  ylim(0,0.7)+ # ponemos límites entre 0 y 100%\n  scale_fill_viridis_d()+ # viridis es una paleta de colores en particular\n  facet_wrap(~tipo_eleccion, scales = \"free\")\n\n\n\n\n\n\n\n\nLo último que nos interesa ver aquí son los temas, que comprenden los elementos visuales que no son controlados por la información propiamente dicha.\n\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, fill=Partido))+\n  geom_col()+\n  ylim(0,0.7)+ # ponemos límites entre 0 y 100%\n  scale_fill_viridis_d()+ # viridis es una paleta de colores en particular\n  facet_wrap(~anio_eleccion, scales = \"free\", ncol=4)+\n  theme_minimal()+ # agregamos definiciones generales\n  theme(legend.position=\"bottom\",  \n        axis.line = element_line(linewidth = 0.75),\n        axis.line.x.bottom = element_line(colour = \"blue\")) # acá podemos definir elementos particulares\n\n\n\n\n\n\n\n# veamos una versión publicable\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, fill=Partido))+\n  geom_col()+\n  scale_y_continuous(limits=c(0,0.7), labels = scales::percent_format(accuracy = 1))+\n  scale_fill_viridis_d()+ # viridis es una paleta de colores en particular\n  facet_wrap(~anio_eleccion, scales = \"free\", ncol=4)+\n  theme_minimal()+ # agregamos definiciones generales\n  theme(legend.position=\"bottom\")+ # acá podemos definir elementos particulares\n  labs(title=\"Resultados electorales del peronismo\",\n       subtitle=\"Provincia de Buenos Aires 2011-2023\",\n       x=\"\", y=\"\", caption = \"Elaboración propia según DINE (provisorios)\")\n\n\n\n\n\n\n\n# cambiemos los límites por las etiquetas\ntab_pj %&gt;% \n  mutate(tipo_eleccion = case_when(tipo_eleccion == \"GENERALES\" ~\"GRAL\",\n                                   tipo_eleccion == \"BALLOTAGE\" ~\"BALOTAJE\", \n                                   .default = as.character(tipo_eleccion))) %&gt;% \n  ggplot(aes(x=factor(tipo_eleccion,c(\"PASO\",\"GRAL\",\"BALOTAJE\")), y=votos_per, fill=Partido))+\n  geom_col()+\n  geom_text(aes(label=paste0(round(votos_per*100),\"%\"), y=votos_per+0.05))+\n  scale_y_continuous(limits=c(0,0.7), breaks=NULL)+\n  scale_fill_viridis_d(breaks=c(\"FRENTE PARA LA VICTORIA\", \"FRENTE DE TODOS\", \"UNION POR LA PATRIA\"))+ # viridis es una paleta de colores en particular\n  facet_wrap(~anio_eleccion, scales = \"free\", ncol=4)+\n  theme_minimal()+ # agregamos definiciones generales\n  theme(legend.position=\"bottom\")+ # acá podemos definir elementos particulares\n  labs(title=\"Resultados electorales del peronismo\",\n       subtitle=\"Provincia de Buenos Aires 2011-2023\",\n       caption = \"Elaboración propia según DINE (provisorios)\", \n       x=\"\", y=\"\", fill=\"\")\n\n\n\n\n\n\n\n\n\n\n\nElegir un gráfico no es una mera cuestión artística: hay distintos tipos de gráficos según qué se quiere mostrar. Para investigar un poco más, dejo dos recursos: una infografía sobre distintos tipos de gráficos y el proyecto Dataviz que funciona como una guía para elegir. Veamos algunos ejemplos.\n\nDistribucionesParte-de-un-todo\n\n\nSi queremos ver una sola distribución (o dos) podemos usar un histograma o un gráfico de densidad. Para comparar entre varias, la mejor opción es el gráfico de cajas.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSi queremos resaltar que estamos mostrando partes de un todo los gráficos de tortas/anillos y las barras apiladas van a ser nuestras mejores opciones.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPara trabajar información geográfica se utiliza una librería llamada sf. Los archivos de tipo geográfico tienen una particularidad: llevan una columna (en general llamada geometry) donde se indica la posición de cada fila en el espacio.\nCarguemos los circuitos electorales disponibles en el portal de datos abiertos de la Provincia de Buenos Aires: https://catalogo.datos.gba.gob.ar/tr/dataset/circuitos-electorales.\n\nlibrary(sf)\ngeo_dpto &lt;- read_sf(\"data/encuentro_4/pba_departamentos.geojson\") %&gt;% \nmutate(dpto_clean = tolower(dpto_clean))\ngeo_seccp &lt;- read_sf(\"data/encuentro_4/pba_seccprovincial.geojson\") %&gt;%\nst_buffer(0.01) %&gt;% \nmutate(sp_clean = str_replace(seccionprovincial_nombre, \"Sección \", \"\"),\nsp_clean = case_when(sp_clean == \"Primera\"~\"S1\",\nsp_clean == \"Segunda\"~\"S2\",\nsp_clean == \"Tercera\"~\"S3\",\nsp_clean == \"Cuarta\"~\"S4\",\nsp_clean == \"Quinta\"~\"S5\",\nsp_clean == \"Sexta\"~\"S6\",\nsp_clean == \"Séptima\"~\"S7\",\nsp_clean == \"Capital\"~\"S8\"))\n\nggplot()+\ngeom_sf(data=geo_dpto, aes(fill=dpto_clean),show.legend=FALSE)+\ngeom_sf(data=geo_seccp, color=\"black\", fill=NA, lwd=1)+\ngeom_label(data=geo_seccp, \naes(label=sp_clean, \nx=as.data.frame(st_coordinates(st_centroid(geo_seccp)))$X, y=as.data.frame(st_coordinates(st_centroid(geo_seccp)))$Y),\nsize=3, position=position_jitter(width=.3, height=.3), label.padding=unit(0.1, \"lines\"))+\ntheme_void()+labs(title=\"Departamentos y secciones provinciales\", subtitle=\"Provincia de Buenos Aires\")\n\n\n\n\n\n\n\n\nHacemos una unión con los resultados electorales.\n\ngeo_resultados &lt;- data %&gt;% \nfilter(Provincia==\"BUENOS AIRES\") %&gt;% \nmutate(dpto_clean = str_replace(seccion, \", Buenos Aires\", \"\"),\ndpto_clean = tolower(dpto_clean),\ndpto_clean = str_replace(dpto_clean, \"adolfo gonzales chaves\", \"a. gonzales chaves\"),\ndpto_clean = str_replace(dpto_clean, \"general madariaga\", \"general juan madariaga\"),\ndpto_clean = str_replace(dpto_clean, \"coronel rosales\", \"cnel. de marina l.rosales\"),\ndpto_clean = str_replace(dpto_clean, \"cañuelas\", \"ca?uelas\"),\ndpto_clean = str_replace(dpto_clean, \"general la madrid\", \"general lamadrid\")) %&gt;% \nleft_join(geo_dpto) %&gt;%\nst_as_sf()\n\ngeo_resultados &lt;- geo_resultados %&gt;% \nfilter(Elecciones==\"GENERALES 2023\" & Partido != \"IMPUGNADO\"& Partido != \"NULO\") %&gt;% \nmutate(Partido = case_when(Partido==\"FRENTE DE IZQUIERDA Y DE TRABAJADORES - UNIDAD\"~\"FIT\",\nPartido==\"JUNTOS POR EL CAMBIO\"~\"JXC\",\nPartido==\"LA LIBERTAD AVANZA\"~\"LLA\",\nPartido==\"UNION POR LA PATRIA\"~\"UXP\",\nPartido==\"HACEMOS POR NUESTRO PAIS\"~\"HNP\", .default = as.character(Partido))) \n\ngeo_resultados %&gt;% \ngroup_by(Partido) %&gt;% \nmutate(Porcentaje_norm=(Porcentaje - min(Porcentaje)) / (max(Porcentaje)-min(Porcentaje)) ) %&gt;% \nungroup() %&gt;% \nggplot()+\ngeom_sf(aes(fill=Porcentaje_norm), lwd=0)+\nfacet_wrap(~Partido)+\nscale_fill_viridis_c()+\ntheme_void()+\ntheme(legend.text = element_blank())+\nlabs(title=\"Resultados en elecciones generales 2023\", \nsubtitle=\"Provincia de Buenos Aires\", fill=\"Max\")"
  },
  {
    "objectID": "intro.html#para-practica",
    "href": "intro.html#para-practica",
    "title": "1. Piletazo",
    "section": "",
    "text": "Opciones para seguir practicando.\n\nGrafiquen la evolución del voto en blanco en valores absolutos.\nGrafiquen la evolución del voto en blanco en una provincia en particular.\nGrafiquen la evolución del voto de un partido político que quieran."
  },
  {
    "objectID": "procesamiento.html#limpieza-y-transformación",
    "href": "procesamiento.html#limpieza-y-transformación",
    "title": "2. Procesamiento",
    "section": "",
    "text": "Limpiar y transformar una base de datos es un proceso creativo que implica adaptar las variables según el uso que se le va a dar. Se dice creativo porque, si bien hay ciertas funciones y procesos frecuentes, varía mucho según cada proyecto y origen de la base. Mutate() es una de las funciones más importantes para este momento.\nMutate() sirve para crear, modificar o eliminar columnas. Es como un gran paragüas donde vamos a insertar las modificaciones.\n\n# podríamos querer crear una variable con un valor único de texto o numérico\ndata %&gt;% \n  mutate(nueva_variable = \"valor único\", \n         nueva_variable_num = 42)\n\n# A tibble: 1,045,200 × 6\n   distrito_nombre    agrupacion_nombre votos_tipo votos_cantidad nueva_variable\n   &lt;chr&gt;              &lt;chr&gt;             &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;         \n 1 Ciudad Autónoma d… &lt;NA&gt;              NULO                    0 valor único   \n 2 Ciudad Autónoma d… &lt;NA&gt;              IMPUGNADO               0 valor único   \n 3 Ciudad Autónoma d… &lt;NA&gt;              RECURRIDO               0 valor único   \n 4 Ciudad Autónoma d… &lt;NA&gt;              COMANDO                 0 valor único   \n 5 Ciudad Autónoma d… UNION POR LA PAT… POSITIVO               95 valor único   \n 6 Ciudad Autónoma d… JUNTOS POR EL CA… POSITIVO               59 valor único   \n 7 Ciudad Autónoma d… LA LIBERTAD AVAN… POSITIVO               57 valor único   \n 8 Ciudad Autónoma d… FRENTE DE IZQUIE… POSITIVO                9 valor único   \n 9 Ciudad Autónoma d… HACEMOS POR NUES… POSITIVO                4 valor único   \n10 Ciudad Autónoma d… &lt;NA&gt;              EN BLANCO               4 valor único   \n# ℹ 1,045,190 more rows\n# ℹ 1 more variable: nueva_variable_num &lt;dbl&gt;\n\n# podríamos querer crear una variable que se desprenda de otras columnas o modificar las existentes\ndata %&gt;% \n  mutate(max_votos = max(votos_cantidad), \n         votos_div = votos_cantidad / max_votos, \n         distrito_nombre_minusc = tolower(distrito_nombre), \n         distrito_nombre = toupper(distrito_nombre))\n\n# A tibble: 1,045,200 × 7\n   distrito_nombre         agrupacion_nombre votos_tipo votos_cantidad max_votos\n   &lt;chr&gt;                   &lt;chr&gt;             &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;\n 1 CIUDAD AUTÓNOMA DE BUE… &lt;NA&gt;              NULO                    0       300\n 2 CIUDAD AUTÓNOMA DE BUE… &lt;NA&gt;              IMPUGNADO               0       300\n 3 CIUDAD AUTÓNOMA DE BUE… &lt;NA&gt;              RECURRIDO               0       300\n 4 CIUDAD AUTÓNOMA DE BUE… &lt;NA&gt;              COMANDO                 0       300\n 5 CIUDAD AUTÓNOMA DE BUE… UNION POR LA PAT… POSITIVO               95       300\n 6 CIUDAD AUTÓNOMA DE BUE… JUNTOS POR EL CA… POSITIVO               59       300\n 7 CIUDAD AUTÓNOMA DE BUE… LA LIBERTAD AVAN… POSITIVO               57       300\n 8 CIUDAD AUTÓNOMA DE BUE… FRENTE DE IZQUIE… POSITIVO                9       300\n 9 CIUDAD AUTÓNOMA DE BUE… HACEMOS POR NUES… POSITIVO                4       300\n10 CIUDAD AUTÓNOMA DE BUE… &lt;NA&gt;              EN BLANCO               4       300\n# ℹ 1,045,190 more rows\n# ℹ 2 more variables: votos_div &lt;dbl&gt;, distrito_nombre_minusc &lt;chr&gt;\n\n# podríamos querer recategorizar una variable\ndata %&gt;% \n  mutate(votos_cantidad_grupo = case_when(votos_cantidad &gt; 60 ~ \"mayor a 60 votos\",\n                                          votos_cantidad &lt;= 60 ~ \"menor o igual a 60 votos\"))\n\n# A tibble: 1,045,200 × 5\n   distrito_nombre                 agrupacion_nombre   votos_tipo votos_cantidad\n   &lt;chr&gt;                           &lt;chr&gt;               &lt;chr&gt;               &lt;dbl&gt;\n 1 Ciudad Autónoma de Buenos Aires &lt;NA&gt;                NULO                    0\n 2 Ciudad Autónoma de Buenos Aires &lt;NA&gt;                IMPUGNADO               0\n 3 Ciudad Autónoma de Buenos Aires &lt;NA&gt;                RECURRIDO               0\n 4 Ciudad Autónoma de Buenos Aires &lt;NA&gt;                COMANDO                 0\n 5 Ciudad Autónoma de Buenos Aires UNION POR LA PATRIA POSITIVO               95\n 6 Ciudad Autónoma de Buenos Aires JUNTOS POR EL CAMB… POSITIVO               59\n 7 Ciudad Autónoma de Buenos Aires LA LIBERTAD AVANZA  POSITIVO               57\n 8 Ciudad Autónoma de Buenos Aires FRENTE DE IZQUIERD… POSITIVO                9\n 9 Ciudad Autónoma de Buenos Aires HACEMOS POR NUESTR… POSITIVO                4\n10 Ciudad Autónoma de Buenos Aires &lt;NA&gt;                EN BLANCO               4\n# ℹ 1,045,190 more rows\n# ℹ 1 more variable: votos_cantidad_grupo &lt;chr&gt;\n\ndata %&gt;% \n  mutate(votos_tipo_recat = case_when(votos_tipo %in% c(\"NULO\",\"IMPUGNADO\",\"RECURRIDO\",\"COMANDO\",\"EN BLANCO\") ~ \"NEGATIVO\", \n                                      .default = as.character(votos_tipo)))\n\n# A tibble: 1,045,200 × 5\n   distrito_nombre  agrupacion_nombre votos_tipo votos_cantidad votos_tipo_recat\n   &lt;chr&gt;            &lt;chr&gt;             &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;           \n 1 Ciudad Autónoma… &lt;NA&gt;              NULO                    0 NEGATIVO        \n 2 Ciudad Autónoma… &lt;NA&gt;              IMPUGNADO               0 NEGATIVO        \n 3 Ciudad Autónoma… &lt;NA&gt;              RECURRIDO               0 NEGATIVO        \n 4 Ciudad Autónoma… &lt;NA&gt;              COMANDO                 0 NEGATIVO        \n 5 Ciudad Autónoma… UNION POR LA PAT… POSITIVO               95 POSITIVO        \n 6 Ciudad Autónoma… JUNTOS POR EL CA… POSITIVO               59 POSITIVO        \n 7 Ciudad Autónoma… LA LIBERTAD AVAN… POSITIVO               57 POSITIVO        \n 8 Ciudad Autónoma… FRENTE DE IZQUIE… POSITIVO                9 POSITIVO        \n 9 Ciudad Autónoma… HACEMOS POR NUES… POSITIVO                4 POSITIVO        \n10 Ciudad Autónoma… &lt;NA&gt;              EN BLANCO               4 NEGATIVO        \n# ℹ 1,045,190 more rows\n\ndata %&gt;% \n  mutate(votos_agrupado = case_when(votos_tipo %in% c(\"NULO\",\"IMPUGNADO\",\"RECURRIDO\",\"COMANDO\",\"EN BLANCO\") ~ \"NEGATIVO\",\n                                      .default = as.character(agrupacion_nombre)),\n         votos_agrupado_v2 = case_when(is.na(agrupacion_nombre) ~ \"NEGATIVO\",\n                                       .default = as.character(agrupacion_nombre)))\n\n# A tibble: 1,045,200 × 6\n   distrito_nombre    agrupacion_nombre votos_tipo votos_cantidad votos_agrupado\n   &lt;chr&gt;              &lt;chr&gt;             &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;         \n 1 Ciudad Autónoma d… &lt;NA&gt;              NULO                    0 NEGATIVO      \n 2 Ciudad Autónoma d… &lt;NA&gt;              IMPUGNADO               0 NEGATIVO      \n 3 Ciudad Autónoma d… &lt;NA&gt;              RECURRIDO               0 NEGATIVO      \n 4 Ciudad Autónoma d… &lt;NA&gt;              COMANDO                 0 NEGATIVO      \n 5 Ciudad Autónoma d… UNION POR LA PAT… POSITIVO               95 UNION POR LA …\n 6 Ciudad Autónoma d… JUNTOS POR EL CA… POSITIVO               59 JUNTOS POR EL…\n 7 Ciudad Autónoma d… LA LIBERTAD AVAN… POSITIVO               57 LA LIBERTAD A…\n 8 Ciudad Autónoma d… FRENTE DE IZQUIE… POSITIVO                9 FRENTE DE IZQ…\n 9 Ciudad Autónoma d… HACEMOS POR NUES… POSITIVO                4 HACEMOS POR N…\n10 Ciudad Autónoma d… &lt;NA&gt;              EN BLANCO               4 NEGATIVO      \n# ℹ 1,045,190 more rows\n# ℹ 1 more variable: votos_agrupado_v2 &lt;chr&gt;\n\n# vamos a hacer una columna con nombres reducidos para utilizar con comodidad\ndata &lt;- data %&gt;% \n  mutate(votos_agrupado = case_when(is.na(agrupacion_nombre) ~ \"NEGATIVO\",\n                                       .default = as.character(agrupacion_nombre)), \n         votos_agrupado_red = case_when(votos_agrupado == \"NEGATIVO\" ~ \"NEG\",\n                                        votos_agrupado == \"UNION POR LA PATRIA\" ~ \"UXP\",\n                                        votos_agrupado == \"JUNTOS POR EL CAMBIO\" ~ \"JXC\",\n                                        votos_agrupado == \"LA LIBERTAD AVANZA\" ~ \"LLA\",\n                                        votos_agrupado == \"FRENTE DE IZQUIERDA Y DE TRABAJADORES - UNIDAD\" ~ \"FIT\",\n                                        votos_agrupado == \"HACEMOS POR NUESTRO PAIS\" ~ \"HNP\"), \n         distrito_nombre_red = stringi::stri_trans_general(distrito_nombre, id=\"Latin-ASCII\"), \n         distrito_nombre_red = tolower(distrito_nombre_red), \n         distrito_nombre_red = gsub(\" \", \"_\", distrito_nombre_red))\n\ndata\n\n# A tibble: 1,045,200 × 7\n   distrito_nombre    agrupacion_nombre votos_tipo votos_cantidad votos_agrupado\n   &lt;chr&gt;              &lt;chr&gt;             &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;         \n 1 Ciudad Autónoma d… &lt;NA&gt;              NULO                    0 NEGATIVO      \n 2 Ciudad Autónoma d… &lt;NA&gt;              IMPUGNADO               0 NEGATIVO      \n 3 Ciudad Autónoma d… &lt;NA&gt;              RECURRIDO               0 NEGATIVO      \n 4 Ciudad Autónoma d… &lt;NA&gt;              COMANDO                 0 NEGATIVO      \n 5 Ciudad Autónoma d… UNION POR LA PAT… POSITIVO               95 UNION POR LA …\n 6 Ciudad Autónoma d… JUNTOS POR EL CA… POSITIVO               59 JUNTOS POR EL…\n 7 Ciudad Autónoma d… LA LIBERTAD AVAN… POSITIVO               57 LA LIBERTAD A…\n 8 Ciudad Autónoma d… FRENTE DE IZQUIE… POSITIVO                9 FRENTE DE IZQ…\n 9 Ciudad Autónoma d… HACEMOS POR NUES… POSITIVO                4 HACEMOS POR N…\n10 Ciudad Autónoma d… &lt;NA&gt;              EN BLANCO               4 NEGATIVO      \n# ℹ 1,045,190 more rows\n# ℹ 2 more variables: votos_agrupado_red &lt;chr&gt;, distrito_nombre_red &lt;chr&gt;"
  },
  {
    "objectID": "procesamiento.html#formatos",
    "href": "procesamiento.html#formatos",
    "title": "2. Procesamiento",
    "section": "",
    "text": "Quizás sea más cómodo alternar entre formato long y wide. Para aquellos casos, pivot_longer() y pivot_wider() nos van a servir.\n\ndata_agrupada &lt;- data %&gt;% \n  group_by(distrito_nombre, votos_agrupado_red) %&gt;% # como tenemos una fila por mesa/agrupación y necesitamos sólo una por provincia, vamos a agrupar y sumar\n  summarise(votos_cantidad = sum(votos_cantidad)) \ndata_agrupada\n\n# A tibble: 144 × 3\n# Groups:   distrito_nombre [24]\n   distrito_nombre votos_agrupado_red votos_cantidad\n   &lt;chr&gt;           &lt;chr&gt;                       &lt;dbl&gt;\n 1 Buenos Aires    FIT                        352790\n 2 Buenos Aires    HNP                        367457\n 3 Buenos Aires    JXC                       2374023\n 4 Buenos Aires    LLA                       2533633\n 5 Buenos Aires    NEG                        346808\n 6 Buenos Aires    UXP                       4224688\n 7 Catamarca       FIT                          3666\n 8 Catamarca       HNP                         14967\n 9 Catamarca       JXC                         39960\n10 Catamarca       LLA                         74570\n# ℹ 134 more rows\n\n\n\ndata_wider &lt;- data_agrupada %&gt;% \n  pivot_wider(names_from=votos_agrupado_red, values_from=votos_cantidad)\n\ndata_wider\n\n# A tibble: 24 × 7\n# Groups:   distrito_nombre [24]\n   distrito_nombre                    FIT    HNP     JXC     LLA    NEG     UXP\n   &lt;chr&gt;                            &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n 1 Buenos Aires                    352790 367457 2374023 2533633 346808 4224688\n 2 Catamarca                         3666  14967   39960   74570  15211   99612\n 3 Chaco                             5482  25804  171756  197596  12966  310962\n 4 Chubut                           15122  26555   70717  120297  10314  110820\n 5 Ciudad Autónoma de Buenos Aires  66145  57607  767367  369424  50056  600832\n 6 Corrientes                        7315  19118  224519  187916  15535  260040\n 7 Córdoba                          31895 665717  519252  769847  37521  308016\n 8 Entre Ríos                       12760  44720  250512  247640  47171  276850\n 9 Formosa                           2772   8793   55097  103911   6953  187229\n10 Jujuy                            16006  30775   90095  168921  11193  146027\n# ℹ 14 more rows\n\n\nY si quisiéramos volver al formato anterior.\n\ndata_longer &lt;- data_wider %&gt;% \n  pivot_longer(!distrito_nombre)\n\ndata_longer\n\n# A tibble: 144 × 3\n# Groups:   distrito_nombre [24]\n   distrito_nombre name    value\n   &lt;chr&gt;           &lt;chr&gt;   &lt;dbl&gt;\n 1 Buenos Aires    FIT    352790\n 2 Buenos Aires    HNP    367457\n 3 Buenos Aires    JXC   2374023\n 4 Buenos Aires    LLA   2533633\n 5 Buenos Aires    NEG    346808\n 6 Buenos Aires    UXP   4224688\n 7 Catamarca       FIT      3666\n 8 Catamarca       HNP     14967\n 9 Catamarca       JXC     39960\n10 Catamarca       LLA     74570\n# ℹ 134 more rows\n\n\nFinalmente, veamos el voto negativo (blanco y otros) por provincia.\n\ndata_wider %&gt;% \n  mutate(TOTAL = rowSums(across()), \n         NEG_per = NEG / TOTAL,\n         label = round(NEG_per*100,1)) %&gt;% \n  ggplot(aes(y=reorder(distrito_nombre, NEG_per), x=NEG_per, fill=NEG_per, label=label)) +\n  geom_col(show.legend = FALSE) +\n  geom_text(aes(x=NEG_per + 0.003), size=3)+\n  labs(x=\"\", y=\"\", \n       title=\"Votos negativos (%) por provincia\", \n       subtitle=\"Elecciones generales 2023\",\n       caption=\"Elaboración propia según resultados provisorios (DINE)\")+\n  theme_minimal()+\n  theme(axis.text.x=element_blank())"
  },
  {
    "objectID": "procesamiento.html#para-seguir-practicando",
    "href": "procesamiento.html#para-seguir-practicando",
    "title": "2. Procesamiento",
    "section": "",
    "text": "Graficar:\n\nEl voto negativo en las secciones de Santa Cruz u otra provincia de preferencia.\nEl voto negativo a en regiones (NEA, NOA, CUYO, PAMPEANA, PATAGONIA).\nEl voto de LLA por provincia en absolutos.\nEl voto de UXP por provincia en porcentaje sobre votos afirmativos (sin contar los negativos)."
  },
  {
    "objectID": "analisis.html#repasando-conceptos-básicos",
    "href": "analisis.html#repasando-conceptos-básicos",
    "title": "3. Análisis",
    "section": "",
    "text": "¿Por qué hablamos de muestra? se llama muestra a un subconjunto de una población que es captado para analizar a una población específica. Con población nos referimos al conjunto de todos los elementos que forman parte de un universo de interés.\nExisten distintas medidas resumen para sintetizar y describir las características principales de un conjunto de datos. Permiten obtener una visión general y son fundamentales para el análisis exploratorio.\nEn este apartado vamos a trabajar con la distribución del ingreso familiar per cápita en CABA. Una distribución es simplemente un conjunto de datos determinado; en este caso, una muestra proveniente de la encuesta antedicha.\n\n# al ser más de 13 mil casos, es imposible verlos en formato texto\neah$ingreso_per_capita_familiar[1:10]\n\n [1] 140040 140000  70000  70000 215000 215000  70000 268333 268333 268333\n\n\nPara visualizar una gran cantidad de datos podemos usar un tipo de gráfico llamado histograma. Veremos más sobre esto en el siguiente apartado. El eje X representa los valores presentes en la distribución y el eje Y representa la cantidad de apariciones de cada uno de esos valores.\n\neah %&gt;% \n  filter(ingreso_per_capita_familiar &lt; 2000000) %&gt;% # filtramos algunos casos para mejorar la visualización\n  ggplot(aes(ingreso_per_capita_familiar))+\n  geom_histogram()+\n  theme_minimal()+\n  labs(title=\"Distribución del ingreso per cápita familiar\", subtitle=\"Ciudad de Buenos Aires\")\n\n\n\n\n\n\n\n\nEl primer conjunto de medidas resumen que veremos son las medidas de tendencia central.\n\nMedia: más conocida como promedio. Es la suma de todos los valores dividida la cantidad de valores. Su sensibilidad a los valores atípicos la vuelve poco representativa en ciertas distribuciones.\n\n\n\n\nFórmula media\n\n\n\nMediana: se obtiene ordenando todos los valores de menor a mayor y tomando el valor que se encuentra justo en la mitad. Evita la sensibilidad a valores atípicos.\nModa: es la observación con mayor frecuencia en la distribución. Puede existir más de una.\n\n\n# guardamos los valores\nmedia &lt;- mean(eah$ingreso_per_capita_familiar)\nmediana &lt;- median(eah$ingreso_per_capita_familiar)\n\n# veamos la media\neah %&gt;% \n  filter(ingreso_per_capita_familiar &lt; 2000000) %&gt;% # filtramos algunos casos para mejorar la visualización\n  ggplot()+\n  geom_histogram(aes(ingreso_per_capita_familiar))+\n  geom_vline(xintercept= media, color=\"blue\", size=1)+\n  geom_text(aes(x=media+1e5, y=2900, label=\"Media\"), color=\"blue\")+\n  theme_minimal()+\n  labs(title=\"Distribución del ingreso per cápita familiar en CABA\", subtitle=paste0(\"Media: \",round(media,1)))\n\n\n\n\n\n\n\n# veamos la mediana\neah %&gt;% \n  filter(ingreso_per_capita_familiar &lt; 2000000) %&gt;% # filtramos algunos casos para mejorar la visualización\n  ggplot()+\n  geom_histogram(aes(ingreso_per_capita_familiar))+\n  geom_vline(xintercept= media, color=\"blue\", size=1, alpha=.5)+\n  geom_vline(xintercept= mediana, color=\"red\", size=1)+\n  geom_text(aes(x=media+1e5, y=2900, label=\"Media\"), color=\"blue\")+\n  geom_text(aes(x=media+4e4, y=2700, label=\"Mediana\"), color=\"red\")+\n  theme_minimal()+\n  labs(title=\"Distribución del ingreso per cápita familiar en CABA\", subtitle=paste0(\"Mediana: \",round(mediana,1)))\n\n\n\n\n\n\n\n\nEl segundo conjunto de medidas resumen que veremos son las medidas de variabilidad.\n\nVarianza: es la media de las desviaciones cuadráticas respecto de la media. Se elevan al cuadrado para evitar la compensación entre números positivos y negativos.\n\n\n\n\nFórmula varianza\n\n\n\nDesvío estándar: es la raíz cuadrada de la varianza; se utiliza para hacer interpretable la métrica.\n\n\n# guardamos los valores\nsd &lt;- sd(eah$ingreso_per_capita_familiar)\n\n# veamos la media\neah %&gt;% \n  filter(ingreso_per_capita_familiar &lt; 2000000) %&gt;% # filtramos algunos casos para mejorar la visualización\n  ggplot()+\n  geom_histogram(aes(ingreso_per_capita_familiar))+\n  geom_vline(xintercept= media, color=\"blue\", size=1)+\n  geom_vline(xintercept= media-sd, color=\"violet\", size=1, linetype = \"dashed\")+\n  geom_vline(xintercept= media+sd, color=\"violet\", size=1, linetype = \"dashed\")+\n  geom_text(aes(x=media+1e5, y=2900, label=\"Media\"), color=\"blue\")+\n  geom_text(aes(x=media+sd+3e5, y=2700, label=\"Media + desvío estándar\"), color=\"violet\")+\n  theme_minimal()+\n  labs(title=\"Distribución del ingreso per cápita familiar\", subtitle=paste0(\"Ciudad de Buenos Aires\"))\n\n\n\n\n\n\n\n\nEl tercer conjunto de medidas resumen que veremos son las medidas de posición. En general trabajamos con cuantiles, valores que dividen la distribución en una cantidad arbitraria de partes iguales. Se suelen usar los quintiles, que vimos en el primer encuentro con la función summary().\n\nsummary(eah$ingreso_per_capita_familiar)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    643  100000  177500  242067  300000 8134000 \n\n\nUna forma típica de ver una distribución según sus quintiles es el gráfico de cajas o bigotes (boxplot en inglés). Si un histograma sirve para ver una distribución en particular, los boxplots van a servirnos para comparar distintas distribuciones.\n\neah %&gt;% \n  filter(ingreso_per_capita_familiar &lt; 2000000) %&gt;% # filtramos algunos casos para mejorar la visualización\n  mutate(comuna = factor(comuna)) %&gt;% \n  ggplot(aes(x=comuna, y=ingreso_per_capita_familiar, fill=comuna))+\n  geom_boxplot(show.legend=FALSE)+\n  stat_summary(fun.y=mean, geom=\"point\", shape=4, size=2, color=\"white\", fill=\"white\") +\n  theme_minimal()+\n  labs(title=\"Distribución del ingreso per cápita familiar\", subtitle=paste0(\"Ciudad de Buenos Aires\"))"
  },
  {
    "objectID": "viz.html#pregunta-problema",
    "href": "viz.html#pregunta-problema",
    "title": "4. Visualización",
    "section": "",
    "text": "Caracterizar la territorialidad del voto en la Provincia de Buenos Aires.\n\nlibrary(tidyverse)\n\ndata &lt;- read_csv(\"data/encuentro_1/ARG_elecciones.csv\")\n\nhead(data,2)\n\n# A tibble: 2 × 10\n  id         seccion Elecciones Partido Porcentaje Votos Participacion electores\n  &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;     &lt;dbl&gt;\n1 BUENOS AI… Adolfo… BALLOTAGE… BLANCO        1.19   134          79.2     14171\n2 BUENOS AI… Albert… BALLOTAGE… BLANCO        1.6    123          84.2      9147\n# ℹ 2 more variables: votantes &lt;dbl&gt;, Provincia &lt;chr&gt;"
  },
  {
    "objectID": "viz.html#construyendo-un-gráfico-en-ggplot",
    "href": "viz.html#construyendo-un-gráfico-en-ggplot",
    "title": "4. Visualización",
    "section": "",
    "text": "Hagamos una tabla con los votos al PJ en las distintas elecciones en la Provincia de Buenos Aires.\n\ncols_pj &lt;- c(\"FRENTE PARA LA VICTORIA\",\"UNION POR LA PATRIA\",\"FRENTE DE TODOS\")\norden &lt;- c(\"P2011\", \"G2011\",\n\"P2015\", \"G2015\",\"B2015\",\n\"P2019\", \"G2019\",\n\"P2023\", \"G2023\",\"B2023\")\n\ntab_pj &lt;- data %&gt;% \n  filter(Provincia==\"BUENOS AIRES\") %&gt;% \n  separate_wider_delim(Elecciones, \" \", names = c(\"tipo_eleccion\", \"anio_eleccion\"), cols_remove=FALSE) %&gt;% \n  group_by(Elecciones, tipo_eleccion, anio_eleccion, Partido) %&gt;% \n  summarise(votos = sum(Votos), \n            electores = sum(electores),\n            votantes = sum(votantes)) %&gt;% \n  mutate(votos_per = votos / votantes,\n         participacion = votantes / electores,\n         Elecciones = str_replace(Elecciones, \"PASO \",\"P\"),\n         Elecciones = str_replace(Elecciones, \"GENERALES \",\"G\"),\n         Elecciones = str_replace(Elecciones, \"BALLOTAGE \",\"B\"),\n         Elecciones = factor(Elecciones, orden)\n         ) %&gt;% \n  filter(Partido %in% cols_pj)\ntab_pj\n\n# A tibble: 10 × 9\n# Groups:   Elecciones, tipo_eleccion, anio_eleccion [10]\n   Elecciones tipo_eleccion anio_eleccion Partido       votos electores votantes\n   &lt;fct&gt;      &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 B2015      BALLOTAGE     2015          FRENTE PARA… 4.83e6  11756541  9700855\n 2 B2023      BALLOTAGE     2023          UNION POR L… 4.92e6  13133726 10017387\n 3 G2011      GENERALES     2011          FRENTE PARA… 4.70e6  10574461  8715437\n 4 G2015      GENERALES     2015          FRENTE PARA… 3.42e6  12033279  9494724\n 5 G2019      GENERALES     2019          FRENTE DE T… 5.03e6  11995955  9882295\n 6 G2023      GENERALES     2023          UNION POR L… 4.22e6  13124435 10199399\n 7 P2011      PASO          2011          FRENTE PARA… 4.22e6  10818764  8540638\n 8 P2015      PASO          2015          FRENTE PARA… 3.24e6  11866173  8686139\n 9 P2019      PASO          2019          FRENTE DE T… 4.66e6  12348284  9279760\n10 P2023      PASO          2023          UNION POR L… 2.83e6  13115144  8902113\n# ℹ 2 more variables: votos_per &lt;dbl&gt;, participacion &lt;dbl&gt;\n\n\nLa librería estrella de la visualización en Tidyverse funciona a través de capas. Cada una se corresponde con funciones diferentes dentro de la visualización.\n\nCon ggplot() simplemente vamos a establecer un lienzo vacío. En este caso, ya recibe la tabla con la información.\n\ntab_pj %&gt;% \n  ggplot()\n\n\n\n\n\n\n\n\nLuego definimos las asignaciones estéticas: la relación entre las variables y ciertos elementos de los gráficos (ejes/coordenadas o distintos atributos como color, tamaño, forma, etc.).\n\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=participacion))\n\n\n\n\n\n\n\n\nLa siguiente definición es de los elementos geométricos con los que vamos a representar los datos definidos con anterioridad.\n\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=participacion))+\n  geom_point()\n\n\n\n\n\n\n\n# intentamos con otro tipo de gráfico\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=participacion))+\n  geom_col()\n\n\n\n\n\n\n\n# intentamos con DOS gráficos\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=participacion))+\n  geom_col(width=0.1, fill=\"violet\")+\n  geom_point(color=\"violet\", size=7)\n\n\n\n\n\n\n\n# intentamos con TRES gráficos\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=participacion))+\n  geom_col(width=0.1, fill=\"violet\")+\n  geom_point(color=\"violet\", size=7)+\n  geom_line(aes(group=1),color=\"black\")\n\n\n\n\n\n\n\n\nSe pueden agregar otros atributos. Color se utiliza para líneas y puntos; fill se utiliza para las áreas de los gráficos.\n\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, color=Partido, shape=anio_eleccion))+\n  geom_point(size=3, stroke=3)\n\n\n\n\n\n\n\n# intentamos con otro tipo de gráfico\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, fill=Partido))+\n  geom_col()\n\n\n\n\n\n\n\n# si se define por fuera del aes() funciona como atributo general\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=votos_per))+\n  geom_col(fill=\"red\")\n\n\n\n\n\n\n\n\nEl siguiente elemento que podríamos incorporar tiene que ver con definir el tipo de paleta de colores a utilizar, los límites de los ejes u otras cuestiones que no afectan a lo esencial del gráfico pero ayudan a comunicar el punto.\n\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, fill=Partido))+\n  geom_col()+\n  ylim(0,1)+ # ponemos límites entre 0 y 100%\n  scale_fill_viridis_d() # viridis es una paleta de colores en particular\n\n\n\n\n\n\n\n\nCuando hablamos de facetado nos referimos a separar los gráficos en partes según alguna variable.\n\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, fill=Partido))+\n  geom_col()+\n  ylim(0,0.7)+ # ponemos límites entre 0 y 100%\n  scale_fill_viridis_d()+ # viridis es una paleta de colores en particular\n  facet_wrap(~tipo_eleccion, scales = \"free\")\n\n\n\n\n\n\n\n\nLo último que nos interesa ver aquí son los temas, que comprenden los elementos visuales que no son controlados por la información propiamente dicha.\n\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, fill=Partido))+\n  geom_col()+\n  ylim(0,0.7)+ # ponemos límites entre 0 y 100%\n  scale_fill_viridis_d()+ # viridis es una paleta de colores en particular\n  facet_wrap(~anio_eleccion, scales = \"free\", ncol=4)+\n  theme_minimal()+ # agregamos definiciones generales\n  theme(legend.position=\"bottom\",  \n        axis.line = element_line(linewidth = 0.75),\n        axis.line.x.bottom = element_line(colour = \"blue\")) # acá podemos definir elementos particulares\n\n\n\n\n\n\n\n# veamos una versión publicable\ntab_pj %&gt;% \n  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, fill=Partido))+\n  geom_col()+\n  scale_y_continuous(limits=c(0,0.7), labels = scales::percent_format(accuracy = 1))+\n  scale_fill_viridis_d()+ # viridis es una paleta de colores en particular\n  facet_wrap(~anio_eleccion, scales = \"free\", ncol=4)+\n  theme_minimal()+ # agregamos definiciones generales\n  theme(legend.position=\"bottom\")+ # acá podemos definir elementos particulares\n  labs(title=\"Resultados electorales del peronismo\",\n       subtitle=\"Provincia de Buenos Aires 2011-2023\",\n       x=\"\", y=\"\", caption = \"Elaboración propia según DINE (provisorios)\")\n\n\n\n\n\n\n\n# cambiemos los límites por las etiquetas\ntab_pj %&gt;% \n  mutate(tipo_eleccion = case_when(tipo_eleccion == \"GENERALES\" ~\"GRAL\",\n                                   tipo_eleccion == \"BALLOTAGE\" ~\"BALOTAJE\", \n                                   .default = as.character(tipo_eleccion))) %&gt;% \n  ggplot(aes(x=factor(tipo_eleccion,c(\"PASO\",\"GRAL\",\"BALOTAJE\")), y=votos_per, fill=Partido))+\n  geom_col()+\n  geom_text(aes(label=paste0(round(votos_per*100),\"%\"), y=votos_per+0.05))+\n  scale_y_continuous(limits=c(0,0.7), breaks=NULL)+\n  scale_fill_viridis_d(breaks=c(\"FRENTE PARA LA VICTORIA\", \"FRENTE DE TODOS\", \"UNION POR LA PATRIA\"))+ # viridis es una paleta de colores en particular\n  facet_wrap(~anio_eleccion, scales = \"free\", ncol=4)+\n  theme_minimal()+ # agregamos definiciones generales\n  theme(legend.position=\"bottom\")+ # acá podemos definir elementos particulares\n  labs(title=\"Resultados electorales del peronismo\",\n       subtitle=\"Provincia de Buenos Aires 2011-2023\",\n       caption = \"Elaboración propia según DINE (provisorios)\", \n       x=\"\", y=\"\", fill=\"\")"
  },
  {
    "objectID": "analisis.html#pregunta-problema",
    "href": "analisis.html#pregunta-problema",
    "title": "3. Análisis",
    "section": "",
    "text": "¿Cómo varía el ingreso en la Ciudad de Buenos Aires por comuna? ¿Cómo se relaciona eso con los resultados electorales de G2023?"
  },
  {
    "objectID": "analisis.html#operando-sobre-grupos",
    "href": "analisis.html#operando-sobre-grupos",
    "title": "3. Análisis",
    "section": "",
    "text": "La función group_by() nos permite hacer ciertos cálculos por grupos. Lógicamente, el esquema es el siguiente.\n\n\n\nEsquema group_by\n\n\nEn este caso, veremos de sacar algunas medidas resumen por comuna.\n\neah_comuna &lt;- eah %&gt;% \n  group_by(comuna) %&gt;% \n  summarise(promedio_ipcf = mean(ingreso_per_capita_familiar),\n            mediana_ipcf = median(ingreso_per_capita_familiar),\n            sd_ipcf = sd(ingreso_per_capita_familiar)) %&gt;% \n  ungroup()\n\n\neah_comuna %&gt;% \n  mutate(comuna = paste0(\"Comuna \",comuna)) %&gt;% \n  ggplot(aes(y=reorder(comuna, promedio_ipcf), x=promedio_ipcf)) +\n  geom_segment(aes(xend=0)) +\n  geom_point(color=\"blue\", size=3) +\n  geom_point(aes(x=mediana_ipcf), color=\"red\", size=2) +\n  labs(x=\"\", y=\"\", \n       title=\"Promedio de ingresos por comuna\", \n       subtitle=\"Ciudad de Buenos Aires\",\n       caption=\"Elaboración propia según EAH\")+\n  theme_minimal()\n\n\n\n\n\n\n\n\nArmemos los resultados electorales para poder comparar resultados electorales con ingresos.\n\nruta &lt;- \"data/encuentro_2/2023_Generales/ResultadosElectorales_2023.csv\"\n\nf &lt;- function(x, pos){\n  filter(x,(cargo_nombre == \"PRESIDENTE Y VICE\")&(distrito_nombre ==\"Ciudad Autónoma de Buenos Aires\"))\n}\ng2023 &lt;- read_csv_chunked(ruta, DataFrameCallback$new(f), chunk_size=10000) %&gt;% \n  mutate(votos_agrupado = case_when(is.na(agrupacion_nombre) ~ \"NEGATIVO\", # transformamos variables\n                                       .default = as.character(agrupacion_nombre)), \n         votos_agrupado_red = case_when(votos_agrupado == \"NEGATIVO\" ~ \"NEG\",\n                                        votos_agrupado == \"UNION POR LA PATRIA\" ~ \"UXP\",\n                                        votos_agrupado == \"JUNTOS POR EL CAMBIO\" ~ \"JXC\",\n                                        votos_agrupado == \"LA LIBERTAD AVANZA\" ~ \"LLA\",\n                                        votos_agrupado == \"FRENTE DE IZQUIERDA Y DE TRABAJADORES - UNIDAD\" ~ \"FIT\",\n                                        votos_agrupado == \"HACEMOS POR NUESTRO PAIS\" ~ \"HNP\")) %&gt;% \n  group_by(seccion_id, votos_agrupado_red) %&gt;% # agrupamos\n  summarise(votos = sum(votos_cantidad)) %&gt;% \n  ungroup() %&gt;% \n  pivot_wider(names_from=votos_agrupado_red, values_from=votos) %&gt;% # pasamos a wider\n  mutate(TOTAL = rowSums(across()), # calculamos %\n         NEG_per = NEG / TOTAL,\n         UXP_per = UXP / TOTAL,\n         JXC_per = JXC / TOTAL,\n         LLA_per = LLA / TOTAL,\n         FIT_per = FIT / TOTAL,\n         HNP_per = HNP / TOTAL, \n         comuna = seccion_id)\n\ndim(g2023) # vemos cuántas filas y columnas tiene\n\n[1] 15 15\n\nhead(g2023) # vemos las primeras 5 filas\n\n# A tibble: 6 × 15\n  seccion_id   FIT   HNP   JXC   LLA   NEG   UXP  TOTAL NEG_per UXP_per JXC_per\n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1          1  3981  3230 45975 25657  3762 38645 121251  0.0310   0.319   0.379\n2          2  1912  2250 57022 17875  1951 19225 100237  0.0195   0.192   0.569\n3          3  4571  3362 39075 23562  2902 38993 112468  0.0258   0.347   0.347\n4          4  5586  4211 39963 29077  4283 51401 134525  0.0318   0.382   0.297\n5          5  4814  3675 43259 20595  2815 42504 117667  0.0239   0.361   0.368\n6          6  4208  3698 54873 20043  2649 39230 124707  0.0212   0.315   0.440\n# ℹ 4 more variables: LLA_per &lt;dbl&gt;, FIT_per &lt;dbl&gt;, HNP_per &lt;dbl&gt;, comuna &lt;dbl&gt;"
  },
  {
    "objectID": "analisis.html#uniones",
    "href": "analisis.html#uniones",
    "title": "3. Análisis",
    "section": "",
    "text": "Para cruzar distintas bases de datos podemos usar las funciones _join() disponibles en Tidyverse. Una buena práctica es chequear que las claves funcionen correctamente antes de realizar la unión.\n\n\n\nUniones\n\n\n\neah %&gt;% \n  select(comuna) %&gt;% \n  distinct() %&gt;% \n  arrange(comuna)\n\n# A tibble: 15 × 1\n   comuna\n    &lt;dbl&gt;\n 1      1\n 2      2\n 3      3\n 4      4\n 5      5\n 6      6\n 7      7\n 8      8\n 9      9\n10     10\n11     11\n12     12\n13     13\n14     14\n15     15\n\ng2023 %&gt;% \n  select(comuna) %&gt;% \n  distinct() %&gt;% \n  arrange(comuna)\n\n# A tibble: 15 × 1\n   comuna\n    &lt;dbl&gt;\n 1      1\n 2      2\n 3      3\n 4      4\n 5      5\n 6      6\n 7      7\n 8      8\n 9      9\n10     10\n11     11\n12     12\n13     13\n14     14\n15     15\n\n\nUnimos.\n\nunion &lt;- left_join(eah_comuna, g2023)\nunion\n\n# A tibble: 15 × 18\n   comuna promedio_ipcf mediana_ipcf sd_ipcf seccion_id   FIT   HNP   JXC   LLA\n    &lt;dbl&gt;         &lt;dbl&gt;        &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1      1       202054.       133333 407191.          1  3981  3230 45975 25657\n 2      2       352813.       288750 274452.          2  1912  2250 57022 17875\n 3      3       239054.       175000 217593.          3  4571  3362 39075 23562\n 4      4       187481.       142667 174572.          4  5586  4211 39963 29077\n 5      5       272783.       203745 249796.          5  4814  3675 43259 20595\n 6      6       318939.       265000 231980.          6  4208  3698 54873 20043\n 7      7       195993.       147000 166927.          7  4863  4193 48420 28137\n 8      8       117076.        90000  95754.          8  4285  3238 26068 27845\n 9      9       178027.       143333 125424.          9  4578  4047 37413 25544\n10     10       225012.       180000 159391.         10  4719  4164 41986 23062\n11     11       264226.       215000 198084.         11  5061  4588 54758 25858\n12     12       314651.       240000 237795.         12  5307  5013 64831 27422\n13     13       347865.       275000 297813.         13  3887  4321 87321 27643\n14     14       415010.       300000 474295.         14  3613  3621 80939 25920\n15     15       238035.       191000 193145.         15  4760  3996 45464 21184\n# ℹ 9 more variables: NEG &lt;dbl&gt;, UXP &lt;dbl&gt;, TOTAL &lt;dbl&gt;, NEG_per &lt;dbl&gt;,\n#   UXP_per &lt;dbl&gt;, JXC_per &lt;dbl&gt;, LLA_per &lt;dbl&gt;, FIT_per &lt;dbl&gt;, HNP_per &lt;dbl&gt;\n\n\nVeamoslo gráficamente.\n\nunion %&gt;% \n  select(comuna, mediana_ipcf, NEG_per, FIT_per, HNP_per, JXC_per, LLA_per, UXP_per) %&gt;% \n  pivot_longer(!c(\"comuna\", \"mediana_ipcf\")) %&gt;% \n  mutate(name = str_replace(name, \"_per\",\"\")) %&gt;% \n  ggplot(aes(x=mediana_ipcf, y=value, color=name))+\n  geom_point()+\n  facet_wrap(~name, scales=\"free\")+\n    labs(title=\"Ingresos x voto (%)\", \n       subtitle=\"Ciudad de Buenos Aires\",\n       y=\"Voto (%)\")+\n  scale_color_manual(values=c(\"red\", \"seagreen\", \"orange\", \"darkviolet\", \"black\", \"dodgerblue\"))+\n  theme_minimal()+\n  theme(axis.text.x=element_blank(),\n        axis.text.y=element_blank(),\n        legend.position = \"none\")"
  },
  {
    "objectID": "analisis.html#para-seguir-practicando",
    "href": "analisis.html#para-seguir-practicando",
    "title": "3. Análisis",
    "section": "",
    "text": "Se puede probar:\n\nunir la base con alguna otra información por comuna presente en la página de datos del GCBA. Analizar la relación con alguna de las variables presentes en esta base.\ngraficar el voto negativo vs votos contra otros partidos. ¿Hay alguna relación interesante?"
  },
  {
    "objectID": "viz.html#por-qué-visualizar",
    "href": "viz.html#por-qué-visualizar",
    "title": "4. Visualización",
    "section": "",
    "text": "Atención\n\n\n\nLa visualización de datos es parte arte y parte ciencia y, como bien dice Claus Wilke, el desafío es realizar correctamente el arte sin desfigurar la ciencia (y viceversa).\n\n\nHay tres razones centrales por las que visualizamos la información:\n\nExplorar los datos: hay relaciones que podemos malinterpretar si sólo miramos métricas resumen.\nExpresar relaciones complejas: no siempre las tablas nos van a permitir ver con claridad cuando hay mucha información involucrada.\nComunicar: en general, construimos información para contársela a otras personas. Probablemente sea más fácil de contar una historia con un gráfico que con una tabla, por ejemplo.\n\n\nExplorar los datosExpresar relaciones complejasComunicar\n\n\nUn gran ejemplo para mostrar lo importante de visualizar los datos es el llamado Cuarteto de Anscombe.\n\n\n\nHans Rosling fundó el proyecto Gapminder y popularizó la siguiente visualización. Aquí está disponible con la explicación del autor.\n\n\n\n\n\n\n\n\nDos ejemplos de visualizaciones que tienen muy en claro qué es lo que quieren comunicar. Una disposición de la información que acompaña y refuerza el mensaje.\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\nFigure 1: Fuente: Chequeado"
  },
  {
    "objectID": "viz.html#el-qué-antecede-al-cómo",
    "href": "viz.html#el-qué-antecede-al-cómo",
    "title": "4. Visualización",
    "section": "",
    "text": "Elegir un gráfico no es una mera cuestión artística: hay distintos tipos de gráficos según qué se quiere mostrar. Para investigar un poco más, dejo dos recursos: una infografía sobre distintos tipos de gráficos y el proyecto Dataviz que funciona como una guía para elegir. Veamos algunos ejemplos.\n\nDistribucionesParte-de-un-todo\n\n\nSi queremos ver una sola distribución (o dos) podemos usar un histograma o un gráfico de densidad. Para comparar entre varias, la mejor opción es el gráfico de cajas.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSi queremos resaltar que estamos mostrando partes de un todo los gráficos de tortas/anillos y las barras apiladas van a ser nuestras mejores opciones."
  },
  {
    "objectID": "viz.html#yapa-mapas",
    "href": "viz.html#yapa-mapas",
    "title": "4. Visualización",
    "section": "",
    "text": "Para trabajar información geográfica se utiliza una librería llamada sf. Los archivos de tipo geográfico tienen una particularidad: llevan una columna (en general llamada geometry) donde se indica la posición de cada fila en el espacio.\nCarguemos los circuitos electorales disponibles en el portal de datos abiertos de la Provincia de Buenos Aires: https://catalogo.datos.gba.gob.ar/tr/dataset/circuitos-electorales.\n\nlibrary(sf)\ngeo_dpto &lt;- read_sf(\"data/encuentro_4/pba_departamentos.geojson\") %&gt;% \nmutate(dpto_clean = tolower(dpto_clean))\ngeo_seccp &lt;- read_sf(\"data/encuentro_4/pba_seccprovincial.geojson\") %&gt;%\nst_buffer(0.01) %&gt;% \nmutate(sp_clean = str_replace(seccionprovincial_nombre, \"Sección \", \"\"),\nsp_clean = case_when(sp_clean == \"Primera\"~\"S1\",\nsp_clean == \"Segunda\"~\"S2\",\nsp_clean == \"Tercera\"~\"S3\",\nsp_clean == \"Cuarta\"~\"S4\",\nsp_clean == \"Quinta\"~\"S5\",\nsp_clean == \"Sexta\"~\"S6\",\nsp_clean == \"Séptima\"~\"S7\",\nsp_clean == \"Capital\"~\"S8\"))\n\nggplot()+\ngeom_sf(data=geo_dpto, aes(fill=dpto_clean),show.legend=FALSE)+\ngeom_sf(data=geo_seccp, color=\"black\", fill=NA, lwd=1)+\ngeom_label(data=geo_seccp, \naes(label=sp_clean, \nx=as.data.frame(st_coordinates(st_centroid(geo_seccp)))$X, y=as.data.frame(st_coordinates(st_centroid(geo_seccp)))$Y),\nsize=3, position=position_jitter(width=.3, height=.3), label.padding=unit(0.1, \"lines\"))+\ntheme_void()+labs(title=\"Departamentos y secciones provinciales\", subtitle=\"Provincia de Buenos Aires\")\n\n\n\n\n\n\n\n\nHacemos una unión con los resultados electorales.\n\ngeo_resultados &lt;- data %&gt;% \nfilter(Provincia==\"BUENOS AIRES\") %&gt;% \nmutate(dpto_clean = str_replace(seccion, \", Buenos Aires\", \"\"),\ndpto_clean = tolower(dpto_clean),\ndpto_clean = str_replace(dpto_clean, \"adolfo gonzales chaves\", \"a. gonzales chaves\"),\ndpto_clean = str_replace(dpto_clean, \"general madariaga\", \"general juan madariaga\"),\ndpto_clean = str_replace(dpto_clean, \"coronel rosales\", \"cnel. de marina l.rosales\"),\ndpto_clean = str_replace(dpto_clean, \"cañuelas\", \"ca?uelas\"),\ndpto_clean = str_replace(dpto_clean, \"general la madrid\", \"general lamadrid\")) %&gt;% \nleft_join(geo_dpto) %&gt;%\nst_as_sf()\n\ngeo_resultados &lt;- geo_resultados %&gt;% \nfilter(Elecciones==\"GENERALES 2023\" & Partido != \"IMPUGNADO\"& Partido != \"NULO\") %&gt;% \nmutate(Partido = case_when(Partido==\"FRENTE DE IZQUIERDA Y DE TRABAJADORES - UNIDAD\"~\"FIT\",\nPartido==\"JUNTOS POR EL CAMBIO\"~\"JXC\",\nPartido==\"LA LIBERTAD AVANZA\"~\"LLA\",\nPartido==\"UNION POR LA PATRIA\"~\"UXP\",\nPartido==\"HACEMOS POR NUESTRO PAIS\"~\"HNP\", .default = as.character(Partido))) \n\ngeo_resultados %&gt;% \ngroup_by(Partido) %&gt;% \nmutate(Porcentaje_norm=(Porcentaje - min(Porcentaje)) / (max(Porcentaje)-min(Porcentaje)) ) %&gt;% \nungroup() %&gt;% \nggplot()+\ngeom_sf(aes(fill=Porcentaje_norm), lwd=0)+\nfacet_wrap(~Partido)+\nscale_fill_viridis_c()+\ntheme_void()+\ntheme(legend.text = element_blank())+\nlabs(title=\"Resultados en elecciones generales 2023\", \nsubtitle=\"Provincia de Buenos Aires\", fill=\"Max\")"
  }
]