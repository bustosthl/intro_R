# 2. Procesamiento

La idea de este apartado es entender más a fondo cómo trabajar tablas para poder hacer análisis y visualización. Será necesario ver algunas cuestiones de ejecución básica de `R` y algunas funciones típicas de `Tidyverse` para limpiar y transformar nuestra base de datos. Un pequeño punteo:

-   tipos de objetos
-   operadores
-   funciones de lectura y escritura de archivos
-   funciones de resumen y exploración de una base de datos
-   funciones de transformación de columnas y valores
-   formas típicas de ordenar una base de datos (*wide*, *long*)
-   unión y consolidación de distintas tablas

Empecemos.

## 2.1. Pregunta-problema

Se mantendrá la tradición: definiremos una guía analítica para que las operaciones que hagamos tengan un sentido claro y sea más sencillo entender cuál es la información relevante.

En este caso nos vamos a seguir preguntando por el voto en blanco en las elecciones argentinas. ¿Qué particularidades presenta en las distintas provincias?

## 2.2. Fuentes de datos

Los datos electorales son una fuente compleja de abordar por el volumen de información que conlleva. El dataset completo está disponible en https://www.argentina.gob.ar/dine/resultados-electorales/elecciones-2023 y vamos a estar utilizando el de las elecciones generales de 2023. No olviden descomprimir el archivo luego de descargarlo. Lo interesante de tomar este tipo de datos es el nivel de desagregación: tenemos resultados por mesa. En los comicios locales, cada mesa pertenece a un circuito, cada circuito pertenence a una sección y cada sección pertenece a un distrito. Por poner un ejemplo: tenemos la mesa **12** en el circuito **12A** pertenenciente a la sección **Comuna 12** del distrito **Capital Federal**. Salvo las mesas, todos los niveles de agregación tienen un código y un nombre. Por ejemplo, la Provincia de Buenos Aires es el distrito n° 2 y Luján es la sección n° 71.

Vamos primero a cargar la librería de `Tidyverse`. En general, la carga de todas las librerías necesarias se realiza al principio del *script*, por una cuestión de estructura general (sirve para saber si tenemos instaladas todas las necesarias, qué tipo de funciones vamos a utilizar, etc.).

```{r}
library(tidyverse)
```

## 2.3. Objetos y operadores

En la programación hay distintas lógicas de construcción de lenguajes. `R` se inscribe dentro de la programación orientada a objetos, es decir, cada elemento es tratado como un objeto. No vamos a profundizar, pero nos va a servir saber que una de las características esenciales de los objetos es que pertenencen a una **clase**. ¿Qué implica? La clase del objeto va a determinar un conjunto de propiedades y operaciones que podemos aplicar en dicho objeto. Los tipos o clases de objetos que vamos a estar utilizando son:

Simples

-   **character**: texto.
-   **numeric**: números.
-   **logical** o **bool**: puede ser verdadero (TRUE) o falso (FALSE).

Compuestos

-   **vector**: lista de elementos *del mismo tipo*; unidimensional.
-   **dataframe**: lo que usualmente llamamos tablas. Tienen filas y columnas.

Hay ciertas palabras y caracteres en los lenguajes de programación que están *reservados* para funciones específicas; en general cambian de color en `Rstudio`. Esas palabras reservadas no se pueden usar para nombrar objetos nuevos, por ejemplo.

```{r}
# veamos las diferencias entre escribir la misma palabra de distintas formas
class(FALSE)
#class(False)
class("False")
```

Un repaso rápido por los operadores más comunes nos muestra los siguientes.

```{r}
# operadores aritméticos
10 + 10 # suma
10 - 10 # resta
10 * 2 # multiplicación
10 / 2 # división
10**2 # elevación

# operadores de relación
2 > 10 # menor
10 > 10 # mayor
10 >= 10 # mayor
"karl" == "marx" # es igual
"karl" != "marx" # es distinto
"marx" %in% c("marx", "durkheim", "weber") # está presente en 

# operadores lógicos
TRUE & FALSE # operador lógico "Y"
TRUE | FALSE # operador lógico "O"

# de asignación
a = 2 #asignamos lo que está a la derecha a lo que está a la izquierda del operador
a
b <- 3 # idem
b
```

Carguemos nuestra base de datos para arrancar.

## 2.4. Procesar resultados electorales

Carguemos sólo 6000 filas, sabiendo que es un dataset muy grande y que quizás se demore mucho cargar toda la base de primera. Veamos una parte para entender la estructura.

```{r}
ruta <- "data/encuentro_2/2023_Generales/ResultadosElectorales_2023.csv"
data <- read_csv(ruta, n_max=6000) # cargamos sólo 6000 filas
data
```

La mayor particularidad de los resultados electorales es tener formato **long** (largo). En el formato **long**, cada fila de la tabla representa una observación única para una combinación específica de variables. Es útil para trabajar con datos que necesitan ser agrupados o resumidos fácilmente. Cada variable está dividida en dos columnas: una para el nombre de la variable y otra para su valor. El formato alternativo es **wide**, donde cada fila representa una observación única y cada columna representa una variable diferente. Es útil cuando se necesita acceder rápidamente a las variables individuales sin necesidad de realizar transformaciones adicionales.

![formatos de tabla](img/formato_tabla.png)

En la base hay un gran número de columnas, que podemos explorar con la función `names()`. También hay elecciones a distintos cargos, como legislativos.

```{r}
names(data)
table(data$cargo_nombre)
```

Vamos a cargar la base completa pero usando una función especial para ir filtrando los casos *antes* de cargar la base, para que nos pese menos el objeto y podamos manipularlo con comodidad.

```{r}
f <- function(x, pos){
  filter(x,(cargo_nombre == "PRESIDENTE Y VICE"))
}
data <- read_csv_chunked(ruta, DataFrameCallback$new(f), chunk_size=10000)
dim(data) # vemos cuántas filas y columnas tiene
head(data) # vemos las primeras 5 filas
```

## 2.5. Exploración y recorte

Probablemente en la mayoría de los casos una base de datos venga con más información de la necesaria. Una de nuestras primeras tareas en el procesamiento de una base de datos va a ser recortar para quedarnos sólo con las filas y columnas que nos sirven. Tomar esas definiciones va a requerir un primer paneo general de la información que contiene la base de datos.

Existen funciones que nos van a resumir, a grandes rasgos, la totalidad de la base.

```{r}
glimpse(data) # ¡hay otras de este tipo en el primer encuentro!
```

Quizás queremos ver algunas filas completas.

```{r}
head(data, 10) # un top N de filas
tail(data, 10) # las últimas N filas 
sample_n(data, 10) # 10 filas al azar
```

Quizás queremos *contar* apariciones de algunos valores.

```{r}
data$votos_tipo %>% # contamos apariciones de tipo de votos hay, en absolutos 
  table() 

data$distrito_nombre %>% # contamos % de apariciones de distritos
  table() %>%
  prop.table() %>% 
  round(digits=4)*100


```

Quizás queremos saber, de manera más general, cuántos valores únicos tiene cada una de las columnas.

```{r}
sapply(data, n_distinct) # sapply sirve para aplicar una función a todas las columnas
```

Puntos interesantes hasta este punto: hay más de un millón de filas; cada una representa un tipo de voto en una mesa en particular; cada nivel de geográfico (distrito, sección, circuito), el cargo y la agrupación tiene id y nombre; al menos 8 columnas tienen un sólo valor, por lo que no nos sirven para esta base de datos.

Para seleccionar filas y columnas vamos a utilizar las funciones `filter()` y `select()`, dos estrellas de `Tidyverse`.

```{r}

# filter recibe un dataframe y una condición
data %>% 
  filter(distrito_nombre == "Buenos Aires") # filtramos sólo los casos de Buenos Aires

# podríamos querer filtrar por más de una condición
data %>% 
  filter(distrito_nombre == "Buenos Aires" & votos_cantidad > 200) # ¿por qué haríamos eso? sólo para mostrar cómo funcionan las condiciones

# podemos jugar con otros operadores lógicos
data %>% 
  filter(distrito_nombre=="Buenos Aires" | votos_tipo != "POSITIVO")

data %>% 
  filter(distrito_nombre %in% c("Buenos Aires","Ciudad Autónoma de Buenos Aires"))

```

Para seleccionar, `select()` nos da una diversidad muy interesante e intuitiva de opciones.

```{r}
# podemos querer seleccionar una columna específica
data %>% 
  select(distrito_id)

# o varias columnas
data %>% 
  select(distrito_id, distrito_nombre)

# si lo pasamos como vector, hay que incluir las comillas
data %>% 
  select(c("distrito_id", "distrito_nombre"))

# podemos querer filtrar un subconjunto continuo de columnas
data %>% 
  select(distrito_id:lista_nombre)

# o podemos querer negar una condición
data %>% 
  select(!distrito_id:lista_nombre)

# podemos filtrar según el nombre de la columna
data %>% 
  select(ends_with("nombre"))

# y agregar condiciones
data %>% 
  select(starts_with("distrito") | starts_with("seccion"))
```

En este caso, vamos a quedarnos con las columnas que tienen más de 1 valor único. No hará falta filtrar todavía.

```{r}

cols_sin_valores <- data %>% 
  sapply(n_distinct) %>% 
  as.data.frame() %>% 
  rename(n_distinct_values = 1) %>% # asigno nombre 
  filter(n_distinct_values == 1) %>% # filtro
  rownames()

cols_sin_valores


data <- data %>% 
  select(!cols_sin_valores) %>% 
  select(!ends_with("id")) %>% 
  select(!c("lista_numero")) %>% 
  select(!(starts_with("seccion") | starts_with("circuito") | starts_with("mesa")))

```

## 2.6. Limpieza y transformación

Limpiar y transformar una base de datos es un proceso *creativo* que implica adaptar las variables según el uso que se le va a dar. Se dice *creativo* porque, si bien hay ciertas funciones y procesos frecuentes, varía mucho según cada proyecto y origen de la base. `Mutate()` es una de las funciones más importantes para este momento.

`Mutate()` sirve para crear, modificar o eliminar columnas. Es como un gran paragüas donde vamos a insertar las modificaciones.

```{r}
# podríamos querer crear una variable con un valor único de texto o numérico
data %>% 
  mutate(nueva_variable = "valor único", 
         nueva_variable_num = 42)

# podríamos querer crear una variable que se desprenda de otras columnas o modificar las existentes
data %>% 
  mutate(max_votos = max(votos_cantidad), 
         votos_div = votos_cantidad / max_votos, 
         distrito_nombre_minusc = tolower(distrito_nombre), 
         distrito_nombre = toupper(distrito_nombre))

# podríamos querer recategorizar una variable
data %>% 
  mutate(votos_cantidad_grupo = case_when(votos_cantidad > 60 ~ "mayor a 60 votos",
                                          votos_cantidad <= 60 ~ "menor o igual a 60 votos"))

data %>% 
  mutate(votos_tipo_recat = case_when(votos_tipo %in% c("NULO","IMPUGNADO","RECURRIDO","COMANDO","EN BLANCO") ~ "NEGATIVO", 
                                      .default = as.character(votos_tipo)))

data %>% 
  mutate(votos_agrupado = case_when(votos_tipo %in% c("NULO","IMPUGNADO","RECURRIDO","COMANDO","EN BLANCO") ~ "NEGATIVO",
                                      .default = as.character(agrupacion_nombre)),
         votos_agrupado_v2 = case_when(is.na(agrupacion_nombre) ~ "NEGATIVO",
                                       .default = as.character(agrupacion_nombre)))

# vamos a hacer una columna con nombres reducidos para utilizar con comodidad
data <- data %>% 
  mutate(votos_agrupado = case_when(is.na(agrupacion_nombre) ~ "NEGATIVO",
                                       .default = as.character(agrupacion_nombre)), 
         votos_agrupado_red = case_when(votos_agrupado == "NEGATIVO" ~ "NEG",
                                        votos_agrupado == "UNION POR LA PATRIA" ~ "UXP",
                                        votos_agrupado == "JUNTOS POR EL CAMBIO" ~ "JXC",
                                        votos_agrupado == "LA LIBERTAD AVANZA" ~ "LLA",
                                        votos_agrupado == "FRENTE DE IZQUIERDA Y DE TRABAJADORES - UNIDAD" ~ "FIT",
                                        votos_agrupado == "HACEMOS POR NUESTRO PAIS" ~ "HNP"), 
         distrito_nombre_red = stringi::stri_trans_general(distrito_nombre, id="Latin-ASCII"), 
         distrito_nombre_red = tolower(distrito_nombre_red), 
         distrito_nombre_red = gsub(" ", "_", distrito_nombre_red))

data

```

## 2.7. Formatos

Quizás sea más cómodo alternar entre formato *long* y *wide*. Para aquellos casos, `pivot_longer()` y `pivot_wider()` nos van a servir.

```{r}
data_agrupada <- data %>% 
  group_by(distrito_nombre, votos_agrupado_red) %>% # como tenemos una fila por mesa/agrupación y necesitamos sólo una por provincia, vamos a agrupar y sumar
  summarise(votos_cantidad = sum(votos_cantidad)) 
data_agrupada
```

```{r}
data_wider <- data_agrupada %>% 
  pivot_wider(names_from=votos_agrupado_red, values_from=votos_cantidad)

data_wider
```

Y si quisiéramos volver al formato anterior.

```{r}
data_longer <- data_wider %>% 
  pivot_longer(!distrito_nombre)

data_longer
```

Finalmente, veamos el voto negativo (blanco y otros) por provincia.

```{r}
data_wider %>% 
  mutate(TOTAL = rowSums(across()), 
         NEG_per = NEG / TOTAL,
         label = round(NEG_per*100,1)) %>% 
  ggplot(aes(y=reorder(distrito_nombre, NEG_per), x=NEG_per, fill=NEG_per, label=label)) +
  geom_col(show.legend = FALSE) +
  geom_text(aes(x=NEG_per + 0.003), size=3)+
  labs(x="", y="", 
       title="Votos negativos (%) por provincia", 
       subtitle="Elecciones generales 2023",
       caption="Elaboración propia según resultados provisorios (DINE)")+
  theme_minimal()+
  theme(axis.text.x=element_blank())

```

## 2.8. Para seguir practicando

Graficar:

-   El voto negativo en **las secciones de Santa Cruz** u otra provincia de preferencia.

-   El voto negativo a **en regiones (NEA, NOA, CUYO, PAMPEANA, PATAGONIA)**.

-   El voto de **LLA por provincia en absolutos**.

-   El voto de **UXP por provincia en porcentaje sobre votos afirmativos (sin contar los negativos)**.
