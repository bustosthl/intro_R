# 4. Visualización

En este apartado nos enfocaremos en entender por qué visualizar datos y cómo construirlos utilizando `ggplot()`.

## 4.1. Pregunta-problema

Caracterizar la territorialidad del voto en la Provincia de Buenos Aires.



```{r}
library(tidyverse)

data <- read_csv("data/encuentro_1/ARG_elecciones.csv")

head(data,2)
```



## 4.2. ¿Por qué visualizar?

::: callout-note
## Atención

La visualización de datos es parte arte y parte ciencia y, como bien dice [Claus Wilke](https://clauswilke.com/dataviz/introduction.html), el desafío es realizar correctamente el arte sin desfigurar la ciencia (y viceversa).
:::

Hay tres razones centrales por las que visualizamos la información:

-   **Explorar los datos**: hay relaciones que podemos malinterpretar si sólo miramos métricas resumen.

-   **Expresar relaciones complejas**: no siempre las tablas nos van a permitir ver con claridad cuando hay mucha información involucrada.

-   **Comunicar**: en general, construimos información para contársela a otras personas. Probablemente sea más fácil de contar una historia con un gráfico que con una tabla, por ejemplo.

::: {.panel-tabset .nav-pills}
## Explorar los datos

Un gran ejemplo para mostrar lo importante de visualizar los datos es el llamado **Cuarteto de Anscombe**.

![](img/cuarteto_anscombe.jpg)

## Expresar relaciones complejas

Hans Rosling fundó el proyecto [Gapminder](https://www.gapminder.org/tools/#$chart-type=bubbles&url=v2) y popularizó la siguiente visualización. [Aquí está disponible con la explicación del autor](https://www.youtube.com/watch?v=dfa7B8LPGOE).

![](img/gapminder.png)

## Comunicar

::: {#fig-inscriptos layout-ncol="2"}
Dos ejemplos de visualizaciones que tienen muy en claro qué es lo que quieren comunicar. Una disposición de la información que acompaña y refuerza el mensaje.

![](img/inscriptos_uba_gral.png){#fig-gral}

![](img/inscriptos_uba_socio.png){#fig-socio}

Fuente: [Chequeado](https://chequeado.com/el-explicador/carreras-universitarias-en-los-ultimos-7-anos-hay-cada-vez-mas-inscriptos-en-exactas-medicina-e-ingenieria-y-cada-vez-menos-en-sociales/)
:::
:::

## 4.3. Construyendo un gráfico en `ggplot()`

Hagamos una tabla con los votos al PJ en las distintas elecciones en la Provincia de Buenos Aires.



```{r}
cols_pj <- c("FRENTE PARA LA VICTORIA","UNION POR LA PATRIA","FRENTE DE TODOS")
orden <- c("P2011", "G2011",
"P2015", "G2015","B2015",
"P2019", "G2019",
"P2023", "G2023","B2023")

tab_pj <- data %>% 
  filter(Provincia=="BUENOS AIRES") %>% 
  separate_wider_delim(Elecciones, " ", names = c("tipo_eleccion", "anio_eleccion"), cols_remove=FALSE) %>% 
  group_by(Elecciones, tipo_eleccion, anio_eleccion, Partido) %>% 
  summarise(votos = sum(Votos), 
            electores = sum(electores),
            votantes = sum(votantes)) %>% 
  mutate(votos_per = votos / votantes,
         participacion = votantes / electores,
         Elecciones = str_replace(Elecciones, "PASO ","P"),
         Elecciones = str_replace(Elecciones, "GENERALES ","G"),
         Elecciones = str_replace(Elecciones, "BALLOTAGE ","B"),
         Elecciones = factor(Elecciones, orden)
         ) %>% 
  filter(Partido %in% cols_pj)
tab_pj
```



La librería estrella de la visualización en `Tidyverse` funciona a través de **capas**. Cada una se corresponde con funciones diferentes dentro de la visualización.

![](img/ggplot_esquema.png)

Con `ggplot()` simplemente vamos a establecer un lienzo vacío. En este caso, ya recibe la tabla con la información.



```{r}
tab_pj %>% 
  ggplot()
```



Luego definimos las **asignaciones estéticas**: la relación entre las variables y ciertos elementos de los gráficos (ejes/coordenadas o distintos atributos como color, tamaño, forma, etc.).



```{r}
tab_pj %>% 
  ggplot(aes(x=factor(Elecciones,orden), y=participacion))
```



La siguiente definición es de los **elementos geométricos** con los que vamos a representar los datos definidos con anterioridad.



```{r}
tab_pj %>% 
  ggplot(aes(x=factor(Elecciones,orden), y=participacion))+
  geom_point()

# intentamos con otro tipo de gráfico
tab_pj %>% 
  ggplot(aes(x=factor(Elecciones,orden), y=participacion))+
  geom_col()

# intentamos con DOS gráficos
tab_pj %>% 
  ggplot(aes(x=factor(Elecciones,orden), y=participacion))+
  geom_col(width=0.1, fill="violet")+
  geom_point(color="violet", size=7)

# intentamos con TRES gráficos
tab_pj %>% 
  ggplot(aes(x=factor(Elecciones,orden), y=participacion))+
  geom_col(width=0.1, fill="violet")+
  geom_point(color="violet", size=7)+
  geom_line(aes(group=1),color="black")
  
```



Se pueden agregar otros atributos. `Color` se utiliza para líneas y puntos; `fill` se utiliza para las áreas de los gráficos.



```{r}
tab_pj %>% 
  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, color=Partido, shape=anio_eleccion))+
  geom_point(size=3, stroke=3)

# intentamos con otro tipo de gráfico
tab_pj %>% 
  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, fill=Partido))+
  geom_col()

# si se define por fuera del aes() funciona como atributo general
tab_pj %>% 
  ggplot(aes(x=factor(Elecciones,orden), y=votos_per))+
  geom_col(fill="red")

```



El siguiente elemento que podríamos incorporar tiene que ver con definir el tipo de paleta de colores a utilizar, los límites de los ejes u otras cuestiones que no afectan a lo esencial del gráfico pero ayudan a comunicar el punto.



```{r}
tab_pj %>% 
  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, fill=Partido))+
  geom_col()+
  ylim(0,1)+ # ponemos límites entre 0 y 100%
  scale_fill_viridis_d() # viridis es una paleta de colores en particular
```



Cuando hablamos de **facetado** nos referimos a separar los gráficos en partes según alguna variable.



```{r}
tab_pj %>% 
  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, fill=Partido))+
  geom_col()+
  ylim(0,0.7)+ # ponemos límites entre 0 y 100%
  scale_fill_viridis_d()+ # viridis es una paleta de colores en particular
  facet_wrap(~tipo_eleccion, scales = "free")
```



Lo último que nos interesa ver aquí son los temas, que comprenden los elementos visuales que no son controlados por la información propiamente dicha.



```{r}
tab_pj %>% 
  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, fill=Partido))+
  geom_col()+
  ylim(0,0.7)+ # ponemos límites entre 0 y 100%
  scale_fill_viridis_d()+ # viridis es una paleta de colores en particular
  facet_wrap(~anio_eleccion, scales = "free", ncol=4)+
  theme_minimal()+ # agregamos definiciones generales
  theme(legend.position="bottom",  
        axis.line = element_line(linewidth = 0.75),
        axis.line.x.bottom = element_line(colour = "blue")) # acá podemos definir elementos particulares

# veamos una versión publicable
tab_pj %>% 
  ggplot(aes(x=factor(Elecciones,orden), y=votos_per, fill=Partido))+
  geom_col()+
  scale_y_continuous(limits=c(0,0.7), labels = scales::percent_format(accuracy = 1))+
  scale_fill_viridis_d()+ # viridis es una paleta de colores en particular
  facet_wrap(~anio_eleccion, scales = "free", ncol=4)+
  theme_minimal()+ # agregamos definiciones generales
  theme(legend.position="bottom")+ # acá podemos definir elementos particulares
  labs(title="Resultados electorales del peronismo",
       subtitle="Provincia de Buenos Aires 2011-2023",
       x="", y="", caption = "Elaboración propia según DINE (provisorios)")

# cambiemos los límites por las etiquetas
tab_pj %>% 
  mutate(tipo_eleccion = case_when(tipo_eleccion == "GENERALES" ~"GRAL",
                                   tipo_eleccion == "BALLOTAGE" ~"BALOTAJE", 
                                   .default = as.character(tipo_eleccion))) %>% 
  ggplot(aes(x=factor(tipo_eleccion,c("PASO","GRAL","BALOTAJE")), y=votos_per, fill=Partido))+
  geom_col()+
  geom_text(aes(label=paste0(round(votos_per*100),"%"), y=votos_per+0.05))+
  scale_y_continuous(limits=c(0,0.7), breaks=NULL)+
  scale_fill_viridis_d(breaks=c("FRENTE PARA LA VICTORIA", "FRENTE DE TODOS", "UNION POR LA PATRIA"))+ # viridis es una paleta de colores en particular
  facet_wrap(~anio_eleccion, scales = "free", ncol=4)+
  theme_minimal()+ # agregamos definiciones generales
  theme(legend.position="bottom")+ # acá podemos definir elementos particulares
  labs(title="Resultados electorales del peronismo",
       subtitle="Provincia de Buenos Aires 2011-2023",
       caption = "Elaboración propia según DINE (provisorios)", 
       x="", y="", fill="")
```



## 4.4. El qué antecede al cómo

Elegir un gráfico no es una *mera* cuestión artística: hay distintos tipos de gráficos según *qué* se quiere mostrar. Para investigar un poco más, dejo dos recursos: una [infografía](https://raw.githubusercontent.com/Financial-Times/chart-doctor/main/visual-vocabulary/poster.png) sobre distintos tipos de gráficos y el [proyecto Dataviz](https://datavizproject.com/) que funciona como una guía para elegir. Veamos algunos ejemplos.

::: {.panel-tabset .nav-pills}
## Distribuciones

Si queremos ver una sola distribución (o dos) podemos usar un histograma o un gráfico de densidad. Para comparar entre varias, la mejor opción es el gráfico de cajas.



```{r}
#| column: screen-inset-shaded
#| layout-nrow: 1
#| echo: false

data %>%
filter(Partido=="BLANCO") %>% 
ggplot(aes(x=Porcentaje))+
geom_histogram()+
#geom_density(color="blue")+
theme_minimal()+
labs(title="Distribución del voto en blanco", subtitle="Provincia de Buenos Aires")

data %>%
filter(Partido=="BLANCO") %>% 
separate_wider_delim(Elecciones, " ", names = c("tipo_eleccion", "anio_eleccion"), cols_remove=FALSE) %>% 
ggplot(aes(x=tipo_eleccion, y=Porcentaje, fill=tipo_eleccion))+
geom_boxplot()+
theme_minimal()+
labs(title="Distribución del voto en blanco según tipo de elección", subtitle="Provincia de Buenos Aires")
```



## Parte-de-un-todo

Si queremos resaltar que estamos mostrando partes de un todo los gráficos de tortas/anillos y las barras apiladas van a ser nuestras mejores opciones. 



```{r}
#| column: screen-inset-shaded
#| layout-nrow: 1
#| echo: false

data %>% 
mutate(partido_agrup = case_when(Partido %in% c("BLANCO","IMPUGNADO","NULO")~"NEGATIVO",.default = "POSITIVO")) %>% 
filter(seccion=="General Pueyrredon, Buenos Aires" & Elecciones=="PASO 2023") %>% 
group_by(partido_agrup, Elecciones) %>% 
summarise(Votos = sum(Votos)) %>% 
ungroup() %>% 
group_by(Elecciones) %>% 
mutate(Porcentaje = Votos / sum(Votos)) %>% 
ungroup() %>% 
ggplot(aes(x=Porcentaje, y="", fill=partido_agrup))+
geom_col()+
coord_polar()+
theme_void()+
labs(title="Votos positivos y negativos en las elecciones PASO 2023", subtitle="General Pueyrredón, Buenos Aires")


data %>% 
mutate(partido_agrup = case_when(Partido %in% c("BLANCO","IMPUGNADO","NULO")~"NEGATIVO",.default = "POSITIVO")) %>% 
filter(seccion=="General Pueyrredon, Buenos Aires" & Elecciones %in% c("PASO 2023", "GENERALES 2023", "BALLOTAGE 2023")) %>%
group_by(partido_agrup, Elecciones) %>% 
summarise(Votos = sum(Votos)) %>% 
ungroup() %>% 
group_by(Elecciones) %>% 
mutate(Porcentaje = Votos / sum(Votos)) %>% 
ungroup() %>% 
ggplot(aes(x=Elecciones, y=Porcentaje, fill=partido_agrup))+
geom_col()+
theme_minimal()+
labs(title="Votos positivos y negativos en las elecciones del 2023", subtitle="General Pueyrredón, Buenos Aires")
```


:::

## 4.5. Yapa: Mapas

Para trabajar información geográfica se utiliza una librería llamada `sf`. Los archivos de tipo geográfico tienen una particularidad: llevan una columna (en general llamada *geometry*) donde se indica la posición de cada fila en el espacio. 

Carguemos los circuitos electorales disponibles en el portal de datos abiertos de la Provincia de Buenos Aires: https://catalogo.datos.gba.gob.ar/tr/dataset/circuitos-electorales. 



```{r}
library(sf)
geo_dpto <- read_sf("data/encuentro_4/pba_departamentos.geojson") %>% 
mutate(dpto_clean = tolower(dpto_clean))
geo_seccp <- read_sf("data/encuentro_4/pba_seccprovincial.geojson") %>%
st_buffer(0.01) %>% 
mutate(sp_clean = str_replace(seccionprovincial_nombre, "Sección ", ""),
sp_clean = case_when(sp_clean == "Primera"~"S1",
sp_clean == "Segunda"~"S2",
sp_clean == "Tercera"~"S3",
sp_clean == "Cuarta"~"S4",
sp_clean == "Quinta"~"S5",
sp_clean == "Sexta"~"S6",
sp_clean == "Séptima"~"S7",
sp_clean == "Capital"~"S8"))

ggplot()+
geom_sf(data=geo_dpto, aes(fill=dpto_clean),show.legend=FALSE)+
geom_sf(data=geo_seccp, color="black", fill=NA, lwd=1)+
geom_label(data=geo_seccp, 
aes(label=sp_clean, 
x=as.data.frame(st_coordinates(st_centroid(geo_seccp)))$X, y=as.data.frame(st_coordinates(st_centroid(geo_seccp)))$Y),
size=3, position=position_jitter(width=.3, height=.3), label.padding=unit(0.1, "lines"))+
theme_void()+labs(title="Departamentos y secciones provinciales", subtitle="Provincia de Buenos Aires")

```



Hacemos una unión con los resultados electorales. 



```{r}

geo_resultados <- data %>% 
filter(Provincia=="BUENOS AIRES") %>% 
mutate(dpto_clean = str_replace(seccion, ", Buenos Aires", ""),
dpto_clean = tolower(dpto_clean),
dpto_clean = str_replace(dpto_clean, "adolfo gonzales chaves", "a. gonzales chaves"),
dpto_clean = str_replace(dpto_clean, "general madariaga", "general juan madariaga"),
dpto_clean = str_replace(dpto_clean, "coronel rosales", "cnel. de marina l.rosales"),
dpto_clean = str_replace(dpto_clean, "cañuelas", "ca?uelas"),
dpto_clean = str_replace(dpto_clean, "general la madrid", "general lamadrid")) %>% 
left_join(geo_dpto) %>%
st_as_sf()

geo_resultados <- geo_resultados %>% 
filter(Elecciones=="GENERALES 2023" & Partido != "IMPUGNADO"& Partido != "NULO") %>% 
mutate(Partido = case_when(Partido=="FRENTE DE IZQUIERDA Y DE TRABAJADORES - UNIDAD"~"FIT-U",
Partido=="HACEMOS POR NUESTRO PAIS"~"HNP", .default = as.character(Partido))) 

geo_resultados %>% 
group_by(Partido) %>% 
mutate(Porcentaje_norm=(Porcentaje - min(Porcentaje)) / (max(Porcentaje)-min(Porcentaje)) ) %>% 
ungroup() %>% 
ggplot()+
geom_sf(aes(fill=Porcentaje_norm))+
facet_wrap(~Partido)+
scale_fill_viridis_c()+
theme_void()+
labs(fill="Porcentaje (min-max)")+ guides(fill=guide_colorbar(ticks.colour = NA))
```




## 4.6. Para seguir practicando

